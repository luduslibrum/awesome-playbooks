{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Use Cases",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "",
            "description": "This playbook gathers basic system information from a CentOS 7 server using SSH. Phantom is configured to poll Jira for new tickets, and the investigation is kicked off automatically when a ticket with the tag \"new_linux_server\" is opened. The results of the SSH commands are formatted and added to the new Jira ticket as comments to help the analyst make a quick decision about how to handle the server. The first time one of these tickets comes through Phantom it will be turned into a Case, then any future tickets will be added to the existing Case to allow all of these servers to be treated as a batch.",
            "hash": "f6084e8641f630229f6e46f58a9a56bdca92b340",
            "joint": {
                "cells": [
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "enrich ticket 2, enrich ticket 1, report failure",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "b9cd1b07-4b7e-4667-abc6-42c2e8b86e43",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 474,
                        "line_start": 461,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 18,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 3100,
                            "y": 640
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 2
                    },
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'get_jira_key' block\n    get_jira_key(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "83a0d1f9-e128-44b9-a15e-4fab631cfdfd",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 16,
                        "line_start": 8,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 280,
                            "y": 640
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 228
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "da17bfbf-4c00-4b1e-81dd-245c118d00a0",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "83a0d1f9-e128-44b9-a15e-4fab631cfdfd",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "56e9cb22-56e0-4962-9c20-4dc79b004ff6",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 335
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ee510197-fd8f-4d23-a14b-c355693469ce",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "56e9cb22-56e0-4962-9c20-4dc79b004ff6",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "32b84b36-bc79-4340-a22d-5df734e54274",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 345
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "71de883d-e3ab-42e8-968c-aa51e9e8ae67",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "32b84b36-bc79-4340-a22d-5df734e54274",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "9480f6ef-b8ae-4b81-9429-b13bed3652a8",
                            "port": "in",
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 355
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9621b56a-cd29-4d62-b05c-318dfb52f202",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "9480f6ef-b8ae-4b81-9429-b13bed3652a8",
                            "port": "out-1",
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4aadb66a-6626-45d4-8b43-a515a09656ad",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 401
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "21aee9cc-f272-4bb1-91f6-32c664346a5f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4aadb66a-6626-45d4-8b43-a515a09656ad",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "1b716230-180f-44c2-9569-3337c1efe957",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 452
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "1bc5a5d0-8f2a-4ec1-b935-7cc56a68081e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "1b716230-180f-44c2-9569-3337c1efe957",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "65c98b94-ff30-4391-807a-2957475dffb1",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 476
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "05314735-f26a-4790-9fb1-ed1ee74a17ac",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "65c98b94-ff30-4391-807a-2957475dffb1",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "52c4ce93-a3ef-40e1-b584-653eeb01ac3e",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 484
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "get jira key"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def get_jira_key(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_jira_key() called')\n    \n    input_parameter_0 = \"\"\n\n    get_jira_key__jira_key = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    container_raw = phantom.get_raw_data(container)\n    container_parsed = json.loads(container_raw)\n    get_jira_key__jira_key = container_parsed['key']\n    phantom.debug(\"using Jira ticket with key: {}\".format(get_jira_key__jira_key))\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='get_jira_key:jira_key', value=json.dumps(get_jira_key__jira_key))\n    get_ticket(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 10,
                        "custom_callback": "",
                        "custom_code": "def get_jira_key(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    \n    get_jira_key__jira_key = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    container_raw = phantom.get_raw_data(container)\n    container_parsed = json.loads(container_raw)\n    get_jira_key__jira_key = container_parsed['key']\n    phantom.debug(\"using Jira ticket with key: {}\".format(get_jira_key__jira_key))\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='get_jira_key:jira_key', value=json.dumps(get_jira_key__jira_key))\n    get_ticket_1()\n\n    return",
                        "custom_join": "",
                        "custom_name": "get jira key",
                        "description": "Extract the Jira Key (the project identifier plus the issue ID in the form ABC-1234) from the raw data of the container as ingested from Jira. ",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "56e9cb22-56e0-4962-9c20-4dc79b004ff6",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 126,
                        "line_start": 100,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Extract the Jira Key (the project identifier plus the issue ID in the form ABC-1234) from the raw data of the container as ingested from Jira. ",
                        "number": 1,
                        "order": 5,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "jira_key"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 420,
                            "y": 620
                        },
                        "previous_function": "",
                        "previous_name": "get_jira_key",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    container_raw = phantom.get_raw_data(container)\n    container_parsed = json.loads(container_raw)\n    get_jira_key__jira_key = container_parsed['key']\n    phantom.debug(\"using Jira ticket with key: {}\".format(get_jira_key__jira_key))\n",
                        "warn": false,
                        "z": 523
                    },
                    {
                        "action": "get data",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "headers": "",
                            "location": "/rest/search?query=new_linux_server&page_size=0&categories=container",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_http",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "headers": "",
                                    "location": "/rest/search?query=new_linux_server&page_size=0&categories=container",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 202,
                                "loaded": false,
                                "missing": false,
                                "name": "http",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            "false"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "GET"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint?query=string)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 1,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "202",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "search containers"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def search_containers(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('search_containers() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'search_containers' call\n\n    parameters = []\n    \n    # build parameters list for 'search_containers' call\n    parameters.append({\n        'headers': \"\",\n        'location': \"/rest/search?query=new_linux_server&page_size=0&categories=container\",\n        'verify_certificate': False,\n    })\n\n    phantom.act(action=\"get data\", parameters=parameters, assets=['http'], callback=format_get_containers, name=\"search_containers\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 356,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "get ticket",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "search containers",
                        "delay": 0,
                        "description": "Search for all existing Phantom containers that match the string \"new_linux_server\" to find other similar containers.",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "4aadb66a-6626-45d4-8b43-a515a09656ad",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 169,
                        "line_start": 149,
                        "message": "Configuring now",
                        "name": "get data",
                        "notes": "Search for all existing Phantom containers that match the string \"new_linux_server\" to find other similar containers.",
                        "number": 1,
                        "order": 7,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1040,
                            "y": 620
                        },
                        "previous_function": "",
                        "previous_name": "search_containers",
                        "required_params": {
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 524
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "format get containers"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def format_get_containers(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('format_get_containers() called')\n    \n    template = \"\"\"%%\n/rest/container/{0}\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"search_containers:action_result.data.*.response_body.results.*.id\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_get_containers\")\n\n    get_containers(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "search containers",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "format get containers",
                        "description": "Format an HTTP GET request to send to this local Phantom instance to pull down all the metadata from each container found by the previous search.",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "1b716230-180f-44c2-9569-3337c1efe957",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 223,
                        "line_start": 205,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Format an HTTP GET request to send to this local Phantom instance to pull down all the metadata from each container found by the previous search.",
                        "number": 2,
                        "order": 9,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "search_containers:action_result.data.*.response_body.results.*.id"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1280,
                            "y": 620
                        },
                        "previous_function": "",
                        "previous_name": "format_get_containers",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n/rest/container/{0}\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 526
                    },
                    {
                        "action": "get data",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "headers": "",
                            "location": "format_get_containers:formatted_data.*",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_http",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "headers": "",
                                    "location": "format_get_containers:formatted_data.*",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 202,
                                "loaded": false,
                                "missing": false,
                                "name": "http",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            "false"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "GET"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint?query=string)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 1,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "202",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get containers"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_containers(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_containers() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'get_containers' call\n    formatted_data_1 = phantom.get_format_data(name='format_get_containers__as_list')\n\n    parameters = []\n    \n    # build parameters list for 'get_containers' call\n    for formatted_part_1 in formatted_data_1:\n        parameters.append({\n            'headers': \"\",\n            'location': formatted_part_1,\n            'verify_certificate': False,\n        })\n\n    phantom.act(action=\"get data\", parameters=parameters, assets=['http'], callback=promote_or_add_to_case, name=\"get_containers\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "search containers",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "get containers",
                        "delay": 0,
                        "description": "Run the formatted HTTP GET request to pull the metadata about all identified containers.",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "65c98b94-ff30-4391-807a-2957475dffb1",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 248,
                        "line_start": 226,
                        "message": "Configuring now",
                        "name": "get data",
                        "notes": "Run the formatted HTTP GET request to pull the metadata about all identified containers.",
                        "number": 4,
                        "order": 10,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1520,
                            "y": 620
                        },
                        "previous_function": "",
                        "previous_name": "get_containers",
                        "required_params": {
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 527
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "promote or add to case"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def promote_or_add_to_case(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('promote_or_add_to_case() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['get_containers:action_result.data.*.response_body'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    found_case = False\n    \n    for result_container in results_item_1_0:\n        if result_container['container_type'] == 'case' and result_container['data']['fields']['customfield_10201'][0] == 'new_linux_server':\n            phantom.debug(\"found matching case with id {}, so this container (id {}) will be added to that case\".format(result_container['id'], container['id']))\n            phantom.merge(case=result_container['id'], container_id=container['id'])\n            found_case = True\n    \n    if not found_case:\n        # if the loop finishes no case was found, so this is the first one and it should be promoted to a case\n        phantom.debug(\"did not find matching case, so this container (id {}) will be promoted to a case\".format(container['id']))\n        phantom.promote(container=container, template=\"Vulnerability Disclosure\", trace=True)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    check_centos_version(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get containers",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 9,
                        "custom_callback": "",
                        "custom_code": "def promote_or_add_to_case(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('promote_or_add_to_case() called')\n    results_data_1 = phantom.collect2(container=container, datapath=['get_containers:action_result.data.*.response_body'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    found_case = False\n    \n    for result_container in results_item_1_0:\n        if result_container['container_type'] == 'case' and result_container['data']['fields']['customfield_10201'][0] == 'new_linux_server':\n            phantom.debug(\"found matching case with id {}, so this container (id {}) will be added to that case\".format(result_container['id'], container['id']))\n            phantom.merge(case=result_container['id'], container_id=container['id'])\n            found_case = True\n    \n    if not found_case:\n        # if the loop finishes no case was found, so this is the first one and it should be promoted to a case\n        phantom.debug(\"did not find matching case, so this container (id {}) will be promoted to a case\".format(container['id']))\n        phantom.promote(container=container, template=\"Vulnerability Disclosure\", trace=True)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                        "custom_join": "",
                        "custom_name": "promote or add to case",
                        "description": "Check if any of the identified containers from the search have been promoted to a case and have the tag \"new_linux_server\". If a match is found, merge this container into that existing case to work with all of these servers in one place. If no matching case is found, promote this container to a case and use that going forward.",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "52c4ce93-a3ef-40e1-b584-653eeb01ac3e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 202,
                        "line_start": 172,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Check if any of the identified containers from the search have been promoted to a case and have the tag \"new_linux_server\". If a match is found, merge this container into that existing case to work with all of these servers in one place. If no matching case is found, promote this container to a case and use that going forward.",
                        "number": 3,
                        "order": 8,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_containers:action_result.data.*.response_body"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1760,
                            "y": 620
                        },
                        "previous_function": "",
                        "previous_name": "promote_or_add_to_case",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    found_case = False\n    \n    for result_container in results_item_1_0:\n        if result_container['container_type'] == 'case' and result_container['data']['fields']['customfield_10201'][0] == 'new_linux_server':\n            phantom.debug(\"found matching case with id {}, so this container (id {}) will be added to that case\".format(result_container['id'], container['id']))\n            phantom.merge(case=result_container['id'], container_id=container['id'])\n            found_case = True\n    \n    if not found_case:\n        # if the loop finishes no case was found, so this is the first one and it should be promoted to a case\n        phantom.debug(\"did not find matching case, so this container (id {}) will be promoted to a case\".format(container['id']))\n        phantom.promote(container=container, template=\"Vulnerability Disclosure\", trace=True)\n",
                        "warn": false,
                        "z": 528
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "7741d8d2-2be2-429b-8728-d5a504010dc1",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "52c4ce93-a3ef-40e1-b584-653eeb01ac3e",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "244064aa-f621-40af-bef2-2c8cfa6b9fee",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 530
                    },
                    {
                        "action": "get ticket",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "id": "get_jira_key:custom_function:jira_key"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get ticket",
                                "actions": [
                                    "on poll",
                                    "set status",
                                    "get ticket",
                                    "list tickets",
                                    "list projects",
                                    "delete ticket",
                                    "add comment",
                                    "update ticket",
                                    "create ticket",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Jira",
                                "app_version": "2.0.18",
                                "appid": "1e1618e7-2f70-4fc0-916a-f96facc2d2e1",
                                "asset_name": "jira",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "id": "get_jira_key:custom_function:jira_key"
                                },
                                "has_app": true,
                                "id": 71,
                                "loaded": false,
                                "missing": false,
                                "name": "jira",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira ticket key"
                                        ],
                                        "data_path": "action_result.parameter.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "MAN-1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "This is a sample testing description of the ticket"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.CustomerSanText",
                                        "data_type": "string",
                                        "example_values": [
                                            ""
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.Epic Link",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.Domain Test",
                                        "data_type": "string",
                                        "example_values": [
                                            ""
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.Sprint",
                                        "data_type": "string",
                                        "example_values": [
                                            "com.atlassian.greenhopper.service.sprint.Sprint@6bb9ab97[id=1,rapidViewId=1,state=ACTIVE,name=MAN Sprint 1,startDate=2017-10-30T16:22:44.954-07:00,endDate=2017-11-13T16:22:00.000-08:00,completeDate=<null>,sequence=1]"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.aggregateprogress.progress",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.aggregateprogress.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.aggregatetimeestimate",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.aggregatetimeoriginalestimate",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.aggregatetimespent",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.assignee",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "jira user account id"
                                        ],
                                        "data_path": "action_result.data.*.fields.assignee.accountId",
                                        "data_type": "string",
                                        "example_values": [
                                            "5d2ef6ab52a8370c567f27bb"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.assignee.accountType",
                                        "data_type": "string",
                                        "example_values": [
                                            "atlassian"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.assignee.active",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.assignee.avatarUrls.16x16",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.assignee.avatarUrls.24x24",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=xsmall&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.assignee.avatarUrls.32x32",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=xsmall&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.assignee.avatarUrls.48x48",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=xsmall&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira user display name"
                                        ],
                                        "data_path": "action_result.data.*.fields.assignee.displayName",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.fields.assignee.emailAddress",
                                        "data_type": "string",
                                        "example_values": [
                                            "abc@domain.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.assignee.key",
                                        "data_type": "string",
                                        "example_values": [
                                            "admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "user name"
                                        ],
                                        "data_path": "action_result.data.*.fields.assignee.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.assignee.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=xsmall&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.assignee.timeZone",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "jira user account id"
                                        ],
                                        "data_path": "action_result.data.*.fields.attachment.*.author.accountId",
                                        "data_type": "string",
                                        "example_values": [
                                            "557058:c4593bd2-4853-4a5e-a9ed-278ca5f17dce"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.attachment.*.author.accountType",
                                        "data_type": "string",
                                        "example_values": [
                                            "atlassian"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.attachment.*.author.active",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.attachment.*.author.avatarUrls.16x16",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=xsmall&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.attachment.*.author.avatarUrls.24x24",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=small&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.attachment.*.author.avatarUrls.32x32",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=medium&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.attachment.*.author.avatarUrls.48x48",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira user display name"
                                        ],
                                        "data_path": "action_result.data.*.fields.attachment.*.author.displayName",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test Admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.fields.attachment.*.author.emailAddress",
                                        "data_type": "string",
                                        "example_values": [
                                            "notifications@domain.us"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.attachment.*.author.key",
                                        "data_type": "string",
                                        "example_values": [
                                            "admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "user name"
                                        ],
                                        "data_path": "action_result.data.*.fields.attachment.*.author.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.attachment.*.author.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/user?username=admin"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.attachment.*.author.timeZone",
                                        "data_type": "string",
                                        "example_values": [
                                            "UTC"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.attachment.*.content",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/attachment/10403/Add+Comment.png"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.attachment.*.created",
                                        "data_type": "string",
                                        "example_values": [
                                            "2018-09-19T18:15:01.060-0700"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.attachment.*.filename",
                                        "data_type": "string",
                                        "example_values": [
                                            "Add Comment.png"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.attachment.*.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "10403"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.attachment.*.mimeType",
                                        "data_type": "string",
                                        "example_values": [
                                            "image/png"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.attachment.*.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/attachment/10403"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.attachment.*.size",
                                        "data_type": "numeric",
                                        "example_values": [
                                            97613
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.attachment.*.thumbnail",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/thumbnail/10403/_thumb_10403.png"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.comments.*.author.active",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.author.avatarUrls.16x16",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=xsmall&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.author.avatarUrls.24x24",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=small&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.author.avatarUrls.32x32",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=medium&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.author.avatarUrls.48x48",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira user display name"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.author.displayName",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test Admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.author.emailAddress",
                                        "data_type": "string",
                                        "example_values": [
                                            "notifications@domain.us"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.comments.*.author.key",
                                        "data_type": "string",
                                        "example_values": [
                                            "admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "user name"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.author.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.author.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/user?username=admin"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.comments.*.author.timeZone",
                                        "data_type": "string",
                                        "example_values": [
                                            "UTC"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.comments.*.body",
                                        "data_type": "string",
                                        "example_values": [
                                            "This is a sample testing comment body"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.comments.*.created",
                                        "data_type": "string",
                                        "example_values": [
                                            "2016-03-15T17:11:49.767-0700"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.comments.*.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "10004"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/issue/10246/comment/10004"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.comments.*.updateAuthor.active",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.updateAuthor.avatarUrls.16x16",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=xsmall&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.updateAuthor.avatarUrls.24x24",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=small&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.updateAuthor.avatarUrls.32x32",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=medium&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.updateAuthor.avatarUrls.48x48",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira user display name"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.updateAuthor.displayName",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test Admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.updateAuthor.emailAddress",
                                        "data_type": "string",
                                        "example_values": [
                                            "notifications@domain.us"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.comments.*.updateAuthor.key",
                                        "data_type": "string",
                                        "example_values": [
                                            "admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "user name"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.updateAuthor.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.comment.comments.*.updateAuthor.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/user?username=admin"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.comments.*.updateAuthor.timeZone",
                                        "data_type": "string",
                                        "example_values": [
                                            "UTC"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.comments.*.updated",
                                        "data_type": "string",
                                        "example_values": [
                                            "2016-03-15T17:11:49.767-0700"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.comments.*.visibility.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "group",
                                            "role"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.comments.*.visibility.value",
                                        "data_type": "string",
                                        "example_values": [
                                            "jira-software-users",
                                            "Users"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.maxResults",
                                        "data_type": "numeric",
                                        "example_values": [
                                            5
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.startAt",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.comment.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            5
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.components.*.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "10104"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.components.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "comp_test1"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.components.*.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/component/10104"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.created",
                                        "data_type": "string",
                                        "example_values": [
                                            "2016-03-13T13:22:08.254-0700"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira user account id"
                                        ],
                                        "data_path": "action_result.data.*.fields.creator.accountId",
                                        "data_type": "string",
                                        "example_values": [
                                            "557058:c4593bd2-4853-4a5e-a9ed-278ca5f17dce"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.creator.accountType",
                                        "data_type": "string",
                                        "example_values": [
                                            "atlassian"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.creator.active",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.creator.avatarUrls.16x16",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=xsmall&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.creator.avatarUrls.24x24",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=small&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.creator.avatarUrls.32x32",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=medium&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.creator.avatarUrls.48x48",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira user display name"
                                        ],
                                        "data_path": "action_result.data.*.fields.creator.displayName",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test Admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.fields.creator.emailAddress",
                                        "data_type": "string",
                                        "example_values": [
                                            "notifications@domain.us"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.creator.key",
                                        "data_type": "string",
                                        "example_values": [
                                            "admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "user name"
                                        ],
                                        "data_path": "action_result.data.*.fields.creator.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.creator.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/user?username=admin"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.creator.timeZone",
                                        "data_type": "string",
                                        "example_values": [
                                            "UTC"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.customfield_10000.errorMessage",
                                        "data_type": "string",
                                        "example_values": [
                                            "The Service Desk you are trying to view does not exist"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.customfield_10000.i18nErrorMessage.i18nKey",
                                        "data_type": "string",
                                        "example_values": [
                                            "sd.agent.servicedesk.error.servicedesk.missing"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.customfield_10002.errorMessage",
                                        "data_type": "string",
                                        "example_values": [
                                            "The Service Desk you are trying to view does not exist"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.customfield_10002.i18nErrorMessage.i18nKey",
                                        "data_type": "string",
                                        "example_values": [
                                            "sd.agent.servicedesk.error.servicedesk.missing"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.customfield_10400.errorMessage",
                                        "data_type": "string",
                                        "example_values": [
                                            "The Service Desk you are trying to view does not exist"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.customfield_10400.i18nErrorMessage.i18nKey",
                                        "data_type": "string",
                                        "example_values": [
                                            "sd.agent.servicedesk.error.servicedesk.missing"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "This is a sample testing description of the ticket"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.duedate",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.environment",
                                        "data_type": "string",
                                        "example_values": [
                                            "above ground"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.fixVersions.*.archived",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.fixVersions.*.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "10000"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.fixVersions.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.fixVersions.*.released",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.fixVersions.*.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/version/10000"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "10615"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.issuetype.avatarId",
                                        "data_type": "numeric",
                                        "example_values": [
                                            10303
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.issuetype.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "This Issue Type is used to create Zephyr Test within Jira"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.issuetype.iconUrl",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/download/resources/com.thed.zephyr.je/images/icons/ico_zephyr_issuetype.png"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.issuetype.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "10400"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.issuetype.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.issuetype.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/issuetype/10400"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.issuetype.subtask",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.priority.iconUrl",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/images/icons/priorities/high.svg"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.priority.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "2"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira ticket priority"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.priority.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "High"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.priority.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/priority/2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.status.description",
                                        "data_type": "string",
                                        "example_values": [
                                            ""
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.status.iconUrl",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/images/icons/statuses/open.png"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.status.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "10000"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.status.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "To Do"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.status.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.1.16.180:8080/rest/api/2/status/10000"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.status.statusCategory.colorName",
                                        "data_type": "string",
                                        "example_values": [
                                            "blue-gray"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.status.statusCategory.id",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.status.statusCategory.key",
                                        "data_type": "string",
                                        "example_values": [
                                            "new"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.status.statusCategory.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "To Do"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.status.statusCategory.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/statuscategory/2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.fields.summary",
                                        "data_type": "string",
                                        "example_values": [
                                            "Mission Control Functionality"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "11849"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira ticket key"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.key",
                                        "data_type": "string",
                                        "example_values": [
                                            "ZEP-14"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuelinks.*.outwardIssue.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/issue/11849"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuelinks.*.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/issueLink/10615"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.type.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "10000"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.type.inward",
                                        "data_type": "string",
                                        "example_values": [
                                            "is blocked by"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.type.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Blocks"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuelinks.*.type.outward",
                                        "data_type": "string",
                                        "example_values": [
                                            "blocks"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuelinks.*.type.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/issueLinkType/10000"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuetype.avatarId",
                                        "data_type": "numeric",
                                        "example_values": [
                                            10303
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuetype.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "A problem which impairs or prevents the functions of the product"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuetype.iconUrl",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/viewavatar?size=xsmall&avatarId=10303&avatarType=issuetype"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuetype.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "1"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira issue type"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuetype.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Defect"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.issuetype.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/issuetype/1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.issuetype.subtask",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.labels",
                                        "data_type": "string",
                                        "example_values": [
                                            "area51"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.lastViewed",
                                        "data_type": "string",
                                        "example_values": [
                                            "2018-09-20T23:54:50.643-0700"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.priority.iconUrl",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/images/icons/priorities/medium.svg"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.priority.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "3"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira ticket priority"
                                        ],
                                        "data_path": "action_result.data.*.fields.priority.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Medium"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.priority.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/priority/3"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.progress.progress",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.progress.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.project.avatarUrls.16x16",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/projectavatar?size=xsmall&avatarId=10403"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.project.avatarUrls.24x24",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/projectavatar?size=small&avatarId=10403"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.project.avatarUrls.32x32",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/projectavatar?size=medium&avatarId=10403"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.project.avatarUrls.48x48",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/projectavatar?avatarId=10403"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.project.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "10100"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira project key"
                                        ],
                                        "data_path": "action_result.data.*.fields.project.key",
                                        "data_type": "string",
                                        "example_values": [
                                            "MAN"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.project.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "TestProject"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.project.projectCategory.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "test"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.project.projectCategory.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "10000"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.project.projectCategory.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "QA-Team"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.project.projectCategory.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://testlab.atlassian.net/rest/api/2/projectCategory/10000"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.project.projectTypeKey",
                                        "data_type": "string",
                                        "example_values": [
                                            "software"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.project.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/project/10100"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.project.simplified",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.reporter.accountType",
                                        "data_type": "string",
                                        "example_values": [
                                            "atlassian"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.reporter.active",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.reporter.avatarUrls.16x16",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=xsmall&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.reporter.avatarUrls.24x24",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=small&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.reporter.avatarUrls.32x32",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?size=medium&ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.reporter.avatarUrls.48x48",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/secure/useravatar?ownerId=admin&avatarId=10500"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira user display name"
                                        ],
                                        "data_path": "action_result.data.*.fields.reporter.displayName",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test Admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.fields.reporter.emailAddress",
                                        "data_type": "string",
                                        "example_values": [
                                            "notifications@domain.us"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.reporter.key",
                                        "data_type": "string",
                                        "example_values": [
                                            "admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "user name"
                                        ],
                                        "data_path": "action_result.data.*.fields.reporter.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.reporter.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/user?username=admin"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.reporter.timeZone",
                                        "data_type": "string",
                                        "example_values": [
                                            "UTC"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.resolution",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.resolution.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Work has been completed on this issue"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.resolution.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "10000"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira ticket resolution"
                                        ],
                                        "data_path": "action_result.data.*.fields.resolution.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Done"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.resolution.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/resolution/10000"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.resolutiondate",
                                        "data_type": "string",
                                        "example_values": [
                                            "2018-09-20T19:02:38.646-0700"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.security",
                                        "data_type": "string",
                                        "example_values": [
                                            ""
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.status.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "This is a sample testing description"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.status.iconUrl",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/images/icons/statuses/closed.png"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.status.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "10001"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.status.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Done"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.status.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/status/10001"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.status.statusCategory.colorName",
                                        "data_type": "string",
                                        "example_values": [
                                            "green"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.status.statusCategory.id",
                                        "data_type": "numeric",
                                        "example_values": [
                                            3
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.status.statusCategory.key",
                                        "data_type": "string",
                                        "example_values": [
                                            "done"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.status.statusCategory.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Done"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.status.statusCategory.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/statuscategory/3"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.statuscategorychangedate",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-07-22T22:43:07.771-0700"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.summary",
                                        "data_type": "string",
                                        "example_values": [
                                            "Sample summary"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.timeestimate",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.timeoriginalestimate",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.timespent",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.updated",
                                        "data_type": "string",
                                        "example_values": [
                                            "2018-09-25T06:21:27.802-0700"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.versions.*.archived",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.versions.*.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "10000"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.versions.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.versions.*.released",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.versions.*.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/version/10000"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.votes.hasVoted",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.votes.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/issue/MAN-1/votes"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.votes.votes",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.watches.isWatching",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.fields.watches.self",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://10.10.123.124:8080/rest/api/2/issue/MAN-1/watchers"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.watches.watchCount",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.worklog.maxResults",
                                        "data_type": "numeric",
                                        "example_values": [
                                            20
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.worklog.startAt",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.worklog.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.fields.workratio",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "10246"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira issue type"
                                        ],
                                        "data_path": "action_result.data.*.issue_type",
                                        "data_type": "string",
                                        "example_values": [
                                            "Defect"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira ticket key"
                                        ],
                                        "data_path": "action_result.data.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "MAN-1"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira ticket priority"
                                        ],
                                        "data_path": "action_result.data.*.priority",
                                        "data_type": "string",
                                        "example_values": [
                                            "Medium"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira project key"
                                        ],
                                        "data_path": "action_result.data.*.project_key",
                                        "data_type": "string",
                                        "example_values": [
                                            "MAN"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira user display name"
                                        ],
                                        "data_path": "action_result.data.*.reporter",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test Admin"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "jira ticket resolution"
                                        ],
                                        "data_path": "action_result.data.*.resolution",
                                        "data_type": "string",
                                        "example_values": [
                                            "Done"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "Done"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.summary",
                                        "data_type": "string",
                                        "example_values": [
                                            "Sample summary"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            ""
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "id": {
                                        "contains": [
                                            "jira ticket key"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Ticket (Issue) Key",
                                        "key": "id",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Jira",
                                "product_vendor": "Atlassian",
                                "targets": "71",
                                "type": "ticketing"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get ticket"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_ticket(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_ticket() called')\n\n    get_jira_key__jira_key = json.loads(phantom.get_run_data(key='get_jira_key:jira_key'))\n    # collect data for 'get_ticket' call\n\n    parameters = []\n    \n    # build parameters list for 'get_ticket' call\n    parameters.append({\n        'id': get_jira_key__jira_key,\n    })\n\n    phantom.act(action=\"get ticket\", parameters=parameters, assets=['jira'], callback=only_new_linux_server, name=\"get_ticket\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 332,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "get ticket",
                        "delay": 0,
                        "description": "Get the full ticket from Jira to use its metadata for future actions and make sure the ingested container references a valid ticket.",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "32b84b36-bc79-4340-a22d-5df734e54274",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 146,
                        "line_start": 129,
                        "message": "Configuring now",
                        "name": "get ticket",
                        "notes": "Get the full ticket from Jira to use its metadata for future actions and make sure the ingested container references a valid ticket.",
                        "number": 2,
                        "order": 6,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 660,
                            "y": 620
                        },
                        "previous_function": "",
                        "previous_name": "get_ticket",
                        "required_params": {
                            "id": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 534
                    },
                    {
                        "action": "execute program",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "command": "cat /etc/redhat-release",
                            "ip_hostname": "get_ticket:action_result.data.*.fields.Custom Text Field One",
                            "timeout": ""
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "execute program",
                                "actions": [
                                    "put file",
                                    "get file",
                                    "get memory usage",
                                    "get disk usage",
                                    "list processes",
                                    "logoff user",
                                    "terminate process",
                                    "shutdown system",
                                    "reboot system",
                                    "delete firewall rule",
                                    "list firewall rules",
                                    "block ip",
                                    "list connections",
                                    "execute program",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "SSH",
                                "app_version": "1.0.42",
                                "appid": "d37aa7fe-c973-44ee-a164-2ca5bf321b1f",
                                "asset_name": "ssh",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "command": "cat /etc/redhat-release",
                                    "ip_hostname": "get_ticket:action_result.data.*.fields.Custom Text Field One",
                                    "script_file": "",
                                    "timeout": ""
                                },
                                "has_app": true,
                                "id": 201,
                                "loaded": false,
                                "missing": false,
                                "name": "ssh",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.command",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_path": "action_result.parameter.ip_hostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.script_file",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.timeout",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.output",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.exit_status",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "command": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Command to be executed on endpoint",
                                        "key": "command",
                                        "order": 1,
                                        "required": true
                                    },
                                    "ip_hostname": {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Hostname/IP to execute command on",
                                        "key": "ip_hostname",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "timeout": {
                                        "data_type": "numeric",
                                        "default": null,
                                        "description": "Seconds before timeout (Default: 60)",
                                        "key": "timeout",
                                        "order": 2,
                                        "required": false
                                    }
                                },
                                "product_name": "SSH",
                                "product_vendor": "Generic",
                                "targets": "201",
                                "type": "endpoint"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "check centos version"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def check_centos_version(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_centos_version() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'check_centos_version' call\n    results_data_1 = phantom.collect2(container=container, datapath=['get_ticket:action_result.data.*.fields.Custom Text Field One', 'get_ticket:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'check_centos_version' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'command': \"cat /etc/redhat-release\",\n                'timeout': \"\",\n                'ip_hostname': results_item_1[0],\n                'script_file': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"execute program\", parameters=parameters, assets=['ssh'], callback=fail_unless_centos7, name=\"check_centos_version\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "get containers",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "check centos version",
                        "delay": 0,
                        "description": "Read the contents of the /etc/redhat-release file on the server to check the CentOS version.",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "244064aa-f621-40af-bef2-2c8cfa6b9fee",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 277,
                        "line_start": 251,
                        "message": "Configuring now",
                        "name": "execute program",
                        "notes": "Read the contents of the /etc/redhat-release file on the server to check the CentOS version.",
                        "number": 4,
                        "order": 11,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2000,
                            "y": 620
                        },
                        "previous_function": "",
                        "previous_name": "check_centos_version",
                        "required_params": {
                            "ip_hostname": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 550
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "dbafdab5-48bc-4e41-8303-db9c20e2afce",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "244064aa-f621-40af-bef2-2c8cfa6b9fee",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4e26eb62-ae54-489b-882f-674bb75e80f3",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 556
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f157298a-6cc5-4667-bbcb-3b6a90ac1271",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4e26eb62-ae54-489b-882f-674bb75e80f3",
                            "port": "out-1",
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "2d22019e-ff5e-4f5c-9ec5-20ae7be77543",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 565
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "3f70e5a4-024c-4876-94ae-887fe5c1b337",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4e26eb62-ae54-489b-882f-674bb75e80f3",
                            "port": "out-1",
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f3674cf7-6876-4a45-b876-0b025e2fa89f",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 566
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "4f68c9e7-4deb-47b2-a196-7df5a744d189",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4e26eb62-ae54-489b-882f-674bb75e80f3",
                            "port": "out-2",
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a69fd28b-a9f3-44f6-bc60-78fcdee67b6a",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 573
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a7bfcda6-3a07-424e-adfb-4136d86afb50",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "2d22019e-ff5e-4f5c-9ec5-20ae7be77543",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "cba88d78-5b10-4f4d-856a-929f89a038ec",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 584
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "042d6558-cb21-4d2b-a202-98d9a34751a6",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f3674cf7-6876-4a45-b876-0b025e2fa89f",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "77f07cc9-3864-4496-bcd8-7240e791a2bd",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 586
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6ac311fb-3720-4291-bb2a-132af23c3fba",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "cba88d78-5b10-4f4d-856a-929f89a038ec",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ea88b7f0-98e4-4c29-92b7-f5539dd0c83f",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 589
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "853a8146-7782-448f-bc50-ed341da15ed8",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "77f07cc9-3864-4496-bcd8-7240e791a2bd",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "7263dea3-7110-487c-8437-db4d5f6ce565",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 591
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "31aea8ae-4d2a-4715-910a-3d1e46e6fa79",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "7263dea3-7110-487c-8437-db4d5f6ce565",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b9cd1b07-4b7e-4667-abc6-42c2e8b86e43",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 593
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "5785c965-4a24-4088-ad79-1359fd170695",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ea88b7f0-98e4-4c29-92b7-f5539dd0c83f",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b9cd1b07-4b7e-4667-abc6-42c2e8b86e43",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 594
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "e2b41ef6-45ae-4e53-a95a-fc6e90736967",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "a69fd28b-a9f3-44f6-bc60-78fcdee67b6a",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b9cd1b07-4b7e-4667-abc6-42c2e8b86e43",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 595
                    },
                    {
                        "action": "add comment",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "comment": "format_login:custom_function:login_table",
                            "id": "get_ticket:action_result.parameter.id"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "add comment",
                                "actions": [
                                    "on poll",
                                    "set status",
                                    "get ticket",
                                    "list tickets",
                                    "list projects",
                                    "delete ticket",
                                    "add comment",
                                    "update ticket",
                                    "create ticket",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Jira",
                                "app_version": "2.0.23",
                                "appid": "1e1618e7-2f70-4fc0-916a-f96facc2d2e1",
                                "asset_name": "jira",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "comment": "format_login:custom_function:login_table",
                                    "id": "get_ticket:action_result.parameter.id",
                                    "internal": ""
                                },
                                "has_app": true,
                                "id": 71,
                                "loaded": false,
                                "missing": false,
                                "name": "jira",
                                "output": [
                                    {
                                        "column_name": "Status",
                                        "column_order": 2,
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "column_name": "Comment",
                                        "column_order": 1,
                                        "data_path": "action_result.parameter.comment",
                                        "data_type": "string",
                                        "example_values": [
                                            "test comment"
                                        ]
                                    },
                                    {
                                        "column_name": "Key",
                                        "column_order": 0,
                                        "contains": [
                                            "jira ticket key"
                                        ],
                                        "data_path": "action_result.parameter.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "MAN-1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.internal",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully added comment"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "comment": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Comment to add",
                                        "key": "comment",
                                        "order": 1,
                                        "required": true
                                    },
                                    "id": {
                                        "contains": [
                                            "jira ticket key"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Issue ID",
                                        "key": "id",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Jira",
                                "product_vendor": "Atlassian",
                                "targets": "71",
                                "type": "ticketing"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "enrich ticket 1"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def enrich_ticket_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('enrich_ticket_1() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    format_login__login_table = json.loads(phantom.get_run_data(key='format_login:login_table'))\n    # collect data for 'enrich_ticket_1' call\n    results_data_1 = phantom.collect2(container=container, datapath=['get_ticket:action_result.parameter.id', 'get_ticket:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'enrich_ticket_1' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'id': results_item_1[0],\n                'comment': format_login__login_table,\n                'internal': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"add comment\", parameters=parameters, assets=['jira'], name=\"enrich_ticket_1\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "get login history",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "enrich ticket 1",
                        "delay": 0,
                        "description": "Enrich the ticket with the table of previous logins.",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ea88b7f0-98e4-4c29-92b7-f5539dd0c83f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 432,
                        "line_start": 406,
                        "message": "Configuring now",
                        "name": "add comment",
                        "notes": "Enrich the ticket with the table of previous logins.",
                        "number": 5,
                        "order": 16,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2860,
                            "y": 480
                        },
                        "previous_function": "",
                        "previous_name": "enrich_ticket_1",
                        "required_params": {
                            "comment": true,
                            "id": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 608
                    },
                    {
                        "action": "add comment",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "comment": "Phantom failed to enrich this ticket because it looks like the server is not running CentOS 7, which is the only operating system supported by this playbook.",
                            "id": "get_ticket:action_result.parameter.id"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "add comment",
                                "actions": [
                                    "on poll",
                                    "set status",
                                    "get ticket",
                                    "list tickets",
                                    "list projects",
                                    "delete ticket",
                                    "add comment",
                                    "update ticket",
                                    "create ticket",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Jira",
                                "app_version": "2.0.23",
                                "appid": "1e1618e7-2f70-4fc0-916a-f96facc2d2e1",
                                "asset_name": "jira",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "comment": "Phantom failed to enrich this ticket because it looks like the server is not running CentOS 7, which is the only operating system supported by this playbook.",
                                    "id": "get_ticket:action_result.parameter.id",
                                    "internal": ""
                                },
                                "has_app": true,
                                "id": 71,
                                "loaded": false,
                                "missing": false,
                                "name": "jira",
                                "output": [
                                    {
                                        "column_name": "Status",
                                        "column_order": 2,
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "column_name": "Comment",
                                        "column_order": 1,
                                        "data_path": "action_result.parameter.comment",
                                        "data_type": "string",
                                        "example_values": [
                                            "test comment"
                                        ]
                                    },
                                    {
                                        "column_name": "Key",
                                        "column_order": 0,
                                        "contains": [
                                            "jira ticket key"
                                        ],
                                        "data_path": "action_result.parameter.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "MAN-1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.internal",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully added comment"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "comment": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Comment to add",
                                        "key": "comment",
                                        "order": 1,
                                        "required": true
                                    },
                                    "id": {
                                        "contains": [
                                            "jira ticket key"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Issue ID",
                                        "key": "id",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Jira",
                                "product_vendor": "Atlassian",
                                "targets": "71",
                                "type": "ticketing"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "report failure"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def report_failure(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('report_failure() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'report_failure' call\n    results_data_1 = phantom.collect2(container=container, datapath=['get_ticket:action_result.parameter.id', 'get_ticket:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'report_failure' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'id': results_item_1[0],\n                'comment': \"Phantom failed to enrich this ticket because it looks like the server is not running CentOS 7, which is the only operating system supported by this playbook.\",\n                'internal': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"add comment\", parameters=parameters, assets=['jira'], name=\"report_failure\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "check centos version",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "report failure",
                        "delay": 0,
                        "description": "Leave a comment on the Jira ticket saying that the server is not running CentOS 7 therefore this playbook doesn't know how to handle it.",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "a69fd28b-a9f3-44f6-bc60-78fcdee67b6a",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 330,
                        "line_start": 305,
                        "message": "Configuring now",
                        "name": "add comment",
                        "notes": "Leave a comment on the Jira ticket saying that the server is not running CentOS 7 therefore this playbook doesn't know how to handle it.",
                        "number": 4,
                        "order": 13,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2380,
                            "y": 760
                        },
                        "previous_function": "",
                        "previous_name": "report_failure",
                        "required_params": {
                            "comment": true,
                            "id": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 609
                    },
                    {
                        "action": "add comment",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "comment": "format_port_list:custom_function:port_table",
                            "id": "get_ticket:action_result.parameter.id"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "add comment",
                                "actions": [
                                    "on poll",
                                    "set status",
                                    "get ticket",
                                    "list tickets",
                                    "list projects",
                                    "delete ticket",
                                    "add comment",
                                    "update ticket",
                                    "create ticket",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Jira",
                                "app_version": "2.0.23",
                                "appid": "1e1618e7-2f70-4fc0-916a-f96facc2d2e1",
                                "asset_name": "jira",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "comment": "format_port_list:custom_function:port_table",
                                    "id": "get_ticket:action_result.parameter.id",
                                    "internal": ""
                                },
                                "has_app": true,
                                "id": 71,
                                "loaded": false,
                                "missing": false,
                                "name": "jira",
                                "output": [
                                    {
                                        "column_name": "Status",
                                        "column_order": 2,
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "column_name": "Comment",
                                        "column_order": 1,
                                        "data_path": "action_result.parameter.comment",
                                        "data_type": "string",
                                        "example_values": [
                                            "test comment"
                                        ]
                                    },
                                    {
                                        "column_name": "Key",
                                        "column_order": 0,
                                        "contains": [
                                            "jira ticket key"
                                        ],
                                        "data_path": "action_result.parameter.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "MAN-1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.internal",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully added comment"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "comment": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Comment to add",
                                        "key": "comment",
                                        "order": 1,
                                        "required": true
                                    },
                                    "id": {
                                        "contains": [
                                            "jira ticket key"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Issue ID",
                                        "key": "id",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Jira",
                                "product_vendor": "Atlassian",
                                "targets": "71",
                                "type": "ticketing"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "enrich ticket 2"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def enrich_ticket_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('enrich_ticket_2() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    format_port_list__port_table = json.loads(phantom.get_run_data(key='format_port_list:port_table'))\n    # collect data for 'enrich_ticket_2' call\n    results_data_1 = phantom.collect2(container=container, datapath=['get_ticket:action_result.parameter.id', 'get_ticket:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'enrich_ticket_2' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'id': results_item_1[0],\n                'comment': format_port_list__port_table,\n                'internal': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"add comment\", parameters=parameters, assets=['jira'], name=\"enrich_ticket_2\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "list open ports",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "enrich ticket 2",
                        "delay": 0,
                        "description": "Enrich the ticket with the table of open ports.",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "7263dea3-7110-487c-8437-db4d5f6ce565",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 461,
                        "line_start": 435,
                        "message": "Configuring now",
                        "name": "add comment",
                        "notes": "Enrich the ticket with the table of open ports.",
                        "number": 6,
                        "order": 17,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2860,
                            "y": 620
                        },
                        "previous_function": "",
                        "previous_name": "enrich_ticket_2",
                        "required_params": {
                            "comment": true,
                            "id": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 625
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "format login"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def format_login(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('format_login() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['get_login_history:action_result.data.*.output'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    format_login__login_table = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # format the output into Jira's markup language for rendering a table\n    format_login__login_table = \"|| output of '/usr/bin/last -a' ||\\n\"\n    last_lines = results_item_1_0[0].split('\\n')\n    for line in last_lines:\n        format_login__login_table += \"| {} |\\n\".format(line)\n    \n    phantom.debug(\"table of logins for jira:\")\n    phantom.debug(format_login__login_table)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='format_login:login_table', value=json.dumps(format_login__login_table))\n    enrich_ticket_1(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get login history",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 11,
                        "custom_callback": "",
                        "custom_code": "def format_login(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('format_login() called')\n    results_data_1 = phantom.collect2(container=container, datapath=['get_login_history:action_result.data.*.output'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    format_login__login_table = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # format the output into Jira's markup language for rendering a table\n    format_login__login_table = \"|| output of '/usr/bin/last -a' ||\\n\"\n    last_lines = results_item_1_0[0].split('\\n')\n    for line in last_lines:\n        format_login__login_table += \"| {} |\\n\".format(line)\n    \n    phantom.debug(\"table of logins for jira:\")\n    phantom.debug(format_login__login_table)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='format_login:login_table', value=json.dumps(format_login__login_table))\n    enrich_ticket_1(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "format login",
                        "description": "Format the output of \"last -a\" into a table.",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "cba88d78-5b10-4f4d-856a-929f89a038ec",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 363,
                        "line_start": 333,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Format the output of \"last -a\"  into a table.",
                        "number": 5,
                        "order": 14,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "login_table"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_login_history:action_result.data.*.output"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2620,
                            "y": 480
                        },
                        "previous_function": "",
                        "previous_name": "format_login",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # format the output into Jira's markup language for rendering a table\n    format_login__login_table = \"|| output of '/usr/bin/last -a' ||\\n\"\n    last_lines = results_item_1_0[0].split('\\n')\n    for line in last_lines:\n        format_login__login_table += \"| {} |\\n\".format(line)\n    \n    phantom.debug(\"table of logins for jira:\")\n    phantom.debug(format_login__login_table)\n",
                        "warn": false,
                        "z": 635
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "format port list"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def format_port_list(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('format_port_list() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['list_open_ports:action_result.data.*.output'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    format_port_list__port_table = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # format the output into Jira's markup language for rendering a table\n    format_port_list__port_table = \"|| protocol || state || recv-q || send-q || local_address:port || peer_address:port ||\\n\"\n    lines = results_item_1_0[0].split('\\n')[1:]\n    for line in lines:\n        \n        protocol, state, recv, send, local_address_port, peer_address_port = line.split()\n        format_port_list__port_table += \"| {} | {} | {} | {} | {} | {} |\\n\".format(protocol,\n                                                                        state,\n                                                                        recv,\n                                                                        send,\n                                                                        local_address_port,\n                                                                        peer_address_port)\n\n    phantom.debug(\"table of ports for jira:\")\n    phantom.debug(format_port_list__port_table)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='format_port_list:port_table', value=json.dumps(format_port_list__port_table))\n    enrich_ticket_2(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "list open ports",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 11,
                        "custom_callback": "",
                        "custom_code": "def format_port_list(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('format_port_list() called')\n    results_data_1 = phantom.collect2(container=container, datapath=['list_open_ports:action_result.data.*.output'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    format_port_list__port_table = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # format the output into Jira's markup language for rendering a table\n    format_port_list__port_table = \"|| protocol || state || recv-q || send-q || local_address:port || peer_address:port ||\\n\"\n    lines = results_item_1_0[0].split('\\n')[1:]\n    for line in lines:\n        \n        protocol, state, recv, send, local_address_port, peer_address_port = line.split()\n        format_port_list__port_table += \"| {} | {} | {} | {} | {} | {} |\\n\".format(protocol,\n                                                                        state,\n                                                                        recv,\n                                                                        send,\n                                                                        local_address_port,\n                                                                        peer_address_port)\n\n    phantom.debug(\"table of ports for jira:\")\n    phantom.debug(format_port_list__port_table)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='format_port_list:port_table', value=json.dumps(format_port_list__port_table))\n    enrich_ticket_2(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "format port list",
                        "description": "Format the output of \"ss -tunapl\"  into a table.",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "77f07cc9-3864-4496-bcd8-7240e791a2bd",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 403,
                        "line_start": 366,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Format the output of \"ss -tunapl\"  into a table.",
                        "number": 6,
                        "order": 15,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "port_table"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "list_open_ports:action_result.data.*.output"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2620,
                            "y": 620
                        },
                        "previous_function": "",
                        "previous_name": "format_port_list",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # format the output into Jira's markup language for rendering a table\n    format_port_list__port_table = \"|| protocol || state || recv-q || send-q || local_address:port || peer_address:port ||\\n\"\n    lines = results_item_1_0[0].split('\\n')[1:]\n    for line in lines:\n        \n        protocol, state, recv, send, local_address_port, peer_address_port = line.split()\n        format_port_list__port_table += \"| {} | {} | {} | {} | {} | {} |\\n\".format(protocol,\n                                                                        state,\n                                                                        recv,\n                                                                        send,\n                                                                        local_address_port,\n                                                                        peer_address_port)\n\n    phantom.debug(\"table of ports for jira:\")\n    phantom.debug(format_port_list__port_table)\n",
                        "warn": false,
                        "z": 639
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 2
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def fail_unless_centos7(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('fail_unless_centos7() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"CentOS Linux release 7\", \"in\", \"check_centos_version:action_result.data.*.output\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        get_login_history(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        list_open_ports(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    report_failure(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "check centos version",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "fail_unless_centos7",
                        "description": "This playbook was developed and tested for CentOS 7 servers, so this checks to make sure the target server is running CentOS 7.",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "4e26eb62-ae54-489b-882f-674bb75e80f3",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 302,
                        "line_start": 280,
                        "name": "decision",
                        "notes": "This playbook was developed and tested for CentOS 7 servers, so this checks to make sure the target server is running CentOS 7.",
                        "number": 2,
                        "order": 12,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "CentOS Linux release 7",
                                        "value": "check_centos_version:action_result.data.*.output"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2240,
                            "y": 620
                        },
                        "previous_function": "",
                        "previous_name": "fail_unless_centos7",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 640
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".border": {
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block",
                                "opacity": 1
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def only_new_linux_server(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('only_new_linux_server() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"get_ticket:action_result.data.*.fields.Custom Label Field Two.0\", \"==\", \"new_linux_server\"],\n            [\"artifact:*.name\", \"==\", \"ticket fields\"],\n        ],\n        logical_operator='and',\n        name=\"only_new_linux_server:condition_1\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        search_containers(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get ticket",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "only_new_linux_server",
                        "description": "Only investigate tickets of type \"new_linux_server\" and only proceed for initial ticket creation (to prevent running again when the ticket is updated).",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "9480f6ef-b8ae-4b81-9429-b13bed3652a8",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 39,
                        "line_start": 19,
                        "name": "filter",
                        "notes": "Only investigate tickets of type \"new_linux_server\" and only proceed for initial ticket creation (to prevent running again when the ticket is updated).",
                        "number": 1,
                        "order": 2,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "get_ticket:action_result.data.*.fields.Custom Label Field Two.0",
                                        "value": "new_linux_server"
                                    },
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "artifact:*.name",
                                        "value": "ticket fields"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 900,
                            "y": 620
                        },
                        "previous_function": "",
                        "previous_name": "only_new_linux_server",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 643
                    },
                    {
                        "action": "execute program",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "command": "/usr/sbin/ss -tunapl",
                            "ip_hostname": "get_ticket:action_result.data.*.fields.Custom Text Field One",
                            "timeout": ""
                        },
                        "angle": 0,
                        "app": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "",
                                "active": true,
                                "app_name": "SSH",
                                "app_version": "1.0.32",
                                "appid": "",
                                "config_type": "asset",
                                "fields": {
                                    "command": "/usr/sbin/ss -tunapl",
                                    "ip_hostname": "get_ticket:action_result.data.*.fields.Custom Text Field One",
                                    "script_file": "",
                                    "timeout": ""
                                },
                                "has_app": true,
                                "id": "-",
                                "loaded": false,
                                "missing": false,
                                "name": "ssh",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.command",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_path": "action_result.parameter.ip_hostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.script_file",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.timeout",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.output",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.exit_status",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "product_name": "SSH",
                                "product_vendor": "Generic",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "list open ports"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".border": {
                                "height": 88
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "fill": "#FFFFFF",
                                "font-size": 12,
                                "font-weight": 300,
                                "opacity": 0,
                                "ref": ".background",
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block",
                                "opacity": 1
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            },
                            "rect.warn-background": {
                                "fill": "#FFFFFF"
                            },
                            "text.icon": {
                                "fill": "#FFFFFF"
                            }
                        },
                        "block_code": "def list_open_ports(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('list_open_ports() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'list_open_ports' call\n    results_data_1 = phantom.collect2(container=container, datapath=['get_ticket:action_result.data.*.fields.Custom Text Field One', 'get_ticket:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'list_open_ports' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'command': \"/usr/sbin/ss -tunapl\",\n                'timeout': \"\",\n                'ip_hostname': results_item_1[0],\n                'script_file': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"execute program\", parameters=parameters, assets=['ssh'], callback=format_port_list, name=\"list_open_ports\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "#5094D4",
                        "connected_to_start": true,
                        "connection_name": "check centos version",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "list open ports",
                        "delay": 0,
                        "description": "Run \"/usr/sbin/ss -tunapl\" to see which services are listening on which TCP and UDP ports. Note that \"ss\" is very similar to \"netstat\", which is deprecated and no longer installed by default on CentOS 7.",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f3674cf7-6876-4a45-b876-0b025e2fa89f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 97,
                        "line_start": 71,
                        "message": "Configuring now",
                        "name": "execute program",
                        "notes": "Run \"ss -tunapl\" to see which services are listening on which TCP and UDP ports. Note that \"ss\" is very similar to \"netstat\", which is deprecated and no longer installed by default on CentOS 7.",
                        "number": 3,
                        "order": 4,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2380,
                            "y": 620
                        },
                        "previous_function": "",
                        "previous_name": "list_open_ports",
                        "required_params": {
                            "ip_hostname": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 112,
                            "width": 168
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 644
                    },
                    {
                        "action": "execute program",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "command": "/usr/bin/last -a",
                            "ip_hostname": "get_ticket:action_result.data.*.fields.Custom Text Field One",
                            "timeout": ""
                        },
                        "angle": 0,
                        "app": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "",
                                "active": true,
                                "app_name": "SSH",
                                "app_version": "1.0.32",
                                "appid": "",
                                "config_type": "asset",
                                "fields": {
                                    "command": "/usr/bin/last -a",
                                    "ip_hostname": "get_ticket:action_result.data.*.fields.Custom Text Field One",
                                    "script_file": "",
                                    "timeout": ""
                                },
                                "has_app": true,
                                "id": "-",
                                "loaded": false,
                                "missing": false,
                                "name": "ssh",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.command",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_path": "action_result.parameter.ip_hostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.script_file",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.timeout",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.output",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.exit_status",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "product_name": "SSH",
                                "product_vendor": "Generic",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get login history"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".border": {
                                "height": 88
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "fill": "#FFFFFF",
                                "font-size": 12,
                                "font-weight": 300,
                                "opacity": 0,
                                "ref": ".background",
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block",
                                "opacity": 1
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            },
                            "rect.warn-background": {
                                "fill": "#FFFFFF"
                            },
                            "text.icon": {
                                "fill": "#FFFFFF"
                            }
                        },
                        "block_code": "def get_login_history(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_login_history() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'get_login_history' call\n    results_data_1 = phantom.collect2(container=container, datapath=['get_ticket:action_result.data.*.fields.Custom Text Field One', 'get_ticket:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'get_login_history' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'command': \"/usr/bin/last -a\",\n                'timeout': \"\",\n                'ip_hostname': results_item_1[0],\n                'script_file': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"execute program\", parameters=parameters, assets=['ssh'], callback=format_login, name=\"get_login_history\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 140,
                        "callsback": true,
                        "color": "#5094D4",
                        "connected_to_start": true,
                        "connection_name": "check centos version",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "get login history",
                        "delay": 0,
                        "description": "Run \"/usr/bin/last -a\" to see the login history.",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "2d22019e-ff5e-4f5c-9ec5-20ae7be77543",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 68,
                        "line_start": 42,
                        "message": "Configuring now",
                        "name": "execute program",
                        "notes": "Run \"/usr/bin/last -a\" to see the login history.",
                        "number": 2,
                        "order": 3,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2380,
                            "y": 480
                        },
                        "previous_function": "",
                        "previous_name": "get_login_history",
                        "required_params": {
                            "ip_hostname": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 112,
                            "width": 168
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 645
                    }
                ]
            },
            "notes": "This playbook uses the following Apps:\n - ssh (execute program) [asset name = ssh] - run shell commands to investigate activity on the server\n - jira (get ticket, update ticket) [asset name = jira] - ingest tickets to start the playbook and enrich tickets with the ssh command results formatted into tables \n\nDeployment notes:\n - To start this playbook automatically when a new Jira ticket is ingested, configure the Jira app to poll for tickets and modify this playbook to extract the server IP address from the correct field in the ticket\n - This could easily be extended to use more commands and take more advanced actions specific to the results returned from the server"
        },
        "python_version": "3",
        "schema": 4,
        "version": "4.10.0.40961"
    },
    "create_time": "2021-01-26T17:14:18.499354+00:00",
    "draft_mode": false,
    "labels": [
        "events"
    ],
    "tags": [],
    "misc": {
        "apps_list": [
            "Jira",
            "SSH",
            "HTTP"
        ]
    }
}