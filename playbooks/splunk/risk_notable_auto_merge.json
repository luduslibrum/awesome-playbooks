{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Risk Notable",
    "coa": {
        "data": {
            "description": "This playbook finds similar or duplicate events based on the risk_object field in a Risk Notable. If two or more events are found with no case, a case will be created with the current container. If a case is found, this container will be merged with the case. ",
            "edges": [
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_44_to_port_17",
                    "sourceNode": "44",
                    "sourcePort": "44_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_8_to_port_41",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "41",
                    "targetPort": "41_in"
                },
                {
                    "id": "port_41_to_port_31",
                    "sourceNode": "41",
                    "sourcePort": "41_out",
                    "targetNode": "31",
                    "targetPort": "31_in"
                },
                {
                    "id": "port_31_to_port_30",
                    "sourceNode": "31",
                    "sourcePort": "31_out",
                    "targetNode": "30",
                    "targetPort": "30_in"
                },
                {
                    "id": "port_17_to_port_36",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "36",
                    "targetPort": "36_in"
                },
                {
                    "id": "port_36_to_port_34",
                    "sourceNode": "36",
                    "sourcePort": "36_out",
                    "targetNode": "34",
                    "targetPort": "34_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_8_to_port_42",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "42",
                    "targetPort": "42_in"
                },
                {
                    "id": "port_42_to_port_44",
                    "sourceNode": "42",
                    "sourcePort": "42_out",
                    "targetNode": "44",
                    "targetPort": "44_in"
                },
                {
                    "id": "port_30_to_port_45",
                    "sourceNode": "30",
                    "sourcePort": "30_out",
                    "targetNode": "45",
                    "targetPort": "45_in"
                },
                {
                    "id": "port_34_to_port_46",
                    "sourceNode": "34",
                    "sourcePort": "34_out",
                    "targetNode": "46",
                    "targetPort": "46_in"
                },
                {
                    "id": "port_45_to_port_47",
                    "sourceNode": "45",
                    "sourcePort": "45_out",
                    "targetNode": "47",
                    "targetPort": "47_in"
                },
                {
                    "id": "port_46_to_port_47",
                    "sourceNode": "46",
                    "sourcePort": "46_out",
                    "targetNode": "47",
                    "targetPort": "47_in"
                },
                {
                    "id": "port_47_to_port_1",
                    "sourceNode": "47",
                    "sourcePort": "47_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_0_to_port_48",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "48",
                    "targetPort": "48_in"
                },
                {
                    "id": "port_48_to_port_8",
                    "sourceNode": "48",
                    "sourcePort": "48_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "conditions": [
                        {
                            "index": 2
                        }
                    ],
                    "id": "port_8_to_port_47",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "47",
                    "targetPort": "47_in"
                }
            ],
            "hash": "1045e1a3676c8593caab5c27f3b2a79f8569e4e5",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 360,
                    "y": -6.394884621840902e-14
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 360,
                    "y": 1634
                },
                "17": {
                    "data": {
                        "advanced": {
                            "customName": "merge into case",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "container_merge",
                            "repoName": "community"
                        },
                        "functionId": 7,
                        "functionName": "merge_into_case",
                        "id": "17",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "container_merge": {
                                "description": "An alternative to the add-to-case API call. This function will copy all artifacts, automation, notes and comments over from every container within the container_list into the target_container. The target_container will be upgraded to a case.\n\nThe notes will be copied over with references to the child containers from where they came. A note will be left in the child containers with a link to the target container. The child containers will be marked as evidence within the target container. \n\nAny notes left as a consequence of the merge process will be skipped in subsequent merges.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "The target container to copy the information over. Supports container dictionary or container id.",
                                        "inputType": "item",
                                        "label": "target_container",
                                        "name": "target_container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "A list of container IDs to copy into the target container.",
                                        "inputType": "list",
                                        "label": "container_list",
                                        "name": "container_list",
                                        "placeholder": "[1, 5, 10]",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Name or ID of the workbook to add if the container does not have a workbook yet. If no workbook is provided, the system default workbook will be added.",
                                        "inputType": "item",
                                        "label": "workbook",
                                        "name": "workbook",
                                        "placeholder": "My Workbook",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "True or False to close the child containers in the container_list after merge. Defaults to False.",
                                        "inputType": "item",
                                        "label": "close_containers",
                                        "name": "close_containers",
                                        "placeholder": "True or False",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "container_merge",
                                "name": "container_merge"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "container_merge": {
                                "close_containers": "True",
                                "container_list": "container:id",
                                "target_container": "filtered-data:case_filter:condition_1:expand_results:custom_function_result.data.*.item.container_id",
                                "workbook": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "17",
                    "type": "utility",
                    "userCode": "\n",
                    "x": 340,
                    "y": 804
                },
                "30": {
                    "data": {
                        "advanced": {
                            "customName": "workbook task update 1",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "workbook_task_update",
                            "repoName": "community"
                        },
                        "functionId": 6,
                        "functionName": "workbook_task_update_1",
                        "id": "30",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "workbook_task_update": {
                                "description": "Update a workbook task by task name",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Name of a workbook task (Required)",
                                        "inputType": "item",
                                        "label": "task_name",
                                        "name": "task_name",
                                        "placeholder": "my_task",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Note title goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_title",
                                        "name": "note_title",
                                        "placeholder": "My Title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Body of note goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_content",
                                        "name": "note_content",
                                        "placeholder": "My notes",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "One of: incomplete, in_progress, complete (Optional)",
                                        "inputType": "item",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "in_progress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Assigns task to provided owner. Accepts keyword 'current\" to assign task to currently running playbook user. (Optional)",
                                        "inputType": "item",
                                        "label": "owner",
                                        "name": "owner",
                                        "placeholder": "username",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "ID of Phantom Container (Required)",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "workbook_task_update",
                                "name": "workbook_task_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "workbook_task_update": {
                                "container": "container:id",
                                "note_content": "merge_all_format:formatted_data",
                                "note_title": "[Auto-Generated] Related Events Merged",
                                "owner": null,
                                "status": null,
                                "task_name": "Investigate"
                            }
                        }
                    },
                    "errors": {},
                    "id": "30",
                    "type": "utility",
                    "x": 0,
                    "y": 1130
                },
                "31": {
                    "data": {
                        "advanced": {
                            "customName": "create case format",
                            "customNameId": 0,
                            "description": "Format a note with a list of all events merged.",
                            "join": [],
                            "note": "Format a note with a list of all events merged."
                        },
                        "functionId": 4,
                        "functionName": "create_case_format",
                        "id": "31",
                        "parameters": [
                            "container:id",
                            "container:name",
                            "find_related_events:custom_function_result.data.*.container_id"
                        ],
                        "template": "Result of merge process:\n\nContainers merged into case {0} - {1}:\n%%\n- {2}\n%%\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "31",
                    "type": "format",
                    "x": 0,
                    "y": 952
                },
                "34": {
                    "data": {
                        "advanced": {
                            "customName": "workbook task update 2",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "workbook_task_update",
                            "repoName": "community"
                        },
                        "functionId": 13,
                        "functionName": "workbook_task_update_2",
                        "id": "34",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "workbook_task_update": {
                                "description": "Update a workbook task by task name",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Name of a workbook task (Required)",
                                        "inputType": "item",
                                        "label": "task_name",
                                        "name": "task_name",
                                        "placeholder": "my_task",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Note title goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_title",
                                        "name": "note_title",
                                        "placeholder": "My Title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Body of note goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_content",
                                        "name": "note_content",
                                        "placeholder": "My notes",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "One of: incomplete, in_progress, complete (Optional)",
                                        "inputType": "item",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "in_progress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Assigns task to provided owner. Accepts keyword 'current\" to assign task to currently running playbook user. (Optional)",
                                        "inputType": "item",
                                        "label": "owner",
                                        "name": "owner",
                                        "placeholder": "username",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "ID of Phantom Container (Required)",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "workbook_task_update",
                                "name": "workbook_task_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "workbook_task_update": {
                                "container": "container:id",
                                "note_content": "merge_individual_format:formatted_data",
                                "note_title": "[Auto-Generated] Related Events Merged",
                                "owner": null,
                                "status": null,
                                "task_name": "Investigate"
                            }
                        }
                    },
                    "errors": {},
                    "id": "34",
                    "type": "utility",
                    "x": 340,
                    "y": 1130
                },
                "36": {
                    "data": {
                        "advanced": {
                            "customName": "merge into case format",
                            "customNameId": 0,
                            "description": "Format a note that shows the result of the merge process.",
                            "join": [],
                            "note": "Format a note that shows the result of the merge process."
                        },
                        "functionId": 5,
                        "functionName": "merge_into_case_format",
                        "id": "36",
                        "parameters": [
                            "container:id",
                            "container:name",
                            "process_responses:custom_function:container_list"
                        ],
                        "template": "Result of merge process:\n\nContainers merged into case {0} - {1}:\n%%\n- {2}\n%%\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "36",
                    "type": "format",
                    "userCode": "\n    # Write your custom code here...\n\n",
                    "x": 340,
                    "y": 952
                },
                "41": {
                    "data": {
                        "advanced": {
                            "customName": "create case",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "container_merge",
                            "repoName": "community"
                        },
                        "functionId": 12,
                        "functionName": "create_case",
                        "id": "41",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "container_merge": {
                                "description": "An alternative to the add-to-case API call. This function will copy all artifacts, automation, notes and comments over from every container within the container_list into the target_container. The target_container will be upgraded to a case.\n\nThe notes will be copied over with references to the child containers from where they came. A note will be left in the child containers with a link to the target container. The child containers will be marked as evidence within the target container. \n\nAny notes left as a consequence of the merge process will be skipped in subsequent merges.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "The target container to copy the information over. Supports container dictionary or container id.",
                                        "inputType": "item",
                                        "label": "target_container",
                                        "name": "target_container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "A list of container IDs to copy into the target container.",
                                        "inputType": "list",
                                        "label": "container_list",
                                        "name": "container_list",
                                        "placeholder": "[1, 5, 10]",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Name or ID of the workbook to add if the container does not have a workbook yet. If no workbook is provided, the system default workbook will be added.",
                                        "inputType": "item",
                                        "label": "workbook",
                                        "name": "workbook",
                                        "placeholder": "My Workbook",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "True or False to close the child containers in the container_list after merge. Defaults to False.",
                                        "inputType": "item",
                                        "label": "close_containers",
                                        "name": "close_containers",
                                        "placeholder": "True or False",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "container_merge",
                                "name": "container_merge"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "container_merge": {
                                "close_containers": "True",
                                "container_list": "find_related_events:custom_function_result.data.*.container_id",
                                "target_container": "container:id",
                                "workbook": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "41",
                    "type": "utility",
                    "userCode": "\n\n",
                    "x": 0,
                    "y": 804
                },
                "42": {
                    "data": {
                        "advanced": {
                            "customName": "expand results",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "passthrough",
                            "repoName": "community"
                        },
                        "functionId": 15,
                        "functionName": "expand_results",
                        "id": "42",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "passthrough": {
                                "description": "Return the inputs as outputs. This is useful for publishing pieces of data for other blocks in the playbook to use.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_1",
                                        "name": "input_1",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_2",
                                        "name": "input_2",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_3",
                                        "name": "input_3",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_4",
                                        "name": "input_4",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_5",
                                        "name": "input_5",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_6",
                                        "name": "input_6",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_7",
                                        "name": "input_7",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_8",
                                        "name": "input_8",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_9",
                                        "name": "input_9",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_10",
                                        "name": "input_10",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "passthrough",
                                "name": "passthrough"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "passthrough": {
                                "input_1": "find_related_events:custom_function_result.data",
                                "input_10": null,
                                "input_2": null,
                                "input_3": null,
                                "input_4": null,
                                "input_5": null,
                                "input_6": null,
                                "input_7": null,
                                "input_8": null,
                                "input_9": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "42",
                    "type": "utility",
                    "userCode": "    parameters = []\n    for item in find_related_events_data[0]:\n        parameters.append({'input_1': item})\n",
                    "x": 340,
                    "y": 476
                },
                "44": {
                    "data": {
                        "advanced": {
                            "customName": "case filter",
                            "customNameId": 0,
                            "description": "Get the related event that is a case.",
                            "join": [],
                            "note": "Get the related event that is a case."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "expand_results:custom_function_result.data.*.item.container_type",
                                        "value": "case"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "existing case",
                                "logic": "and"
                            }
                        ],
                        "functionId": 3,
                        "functionName": "case_filter",
                        "id": "44",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "44",
                    "type": "filter",
                    "x": 400,
                    "y": 624
                },
                "45": {
                    "data": {
                        "advanced": {
                            "customName": "format case output",
                            "customNameId": 0,
                            "description": "Format a note indicating a case was created",
                            "join": [],
                            "note": "Format a note indicating a case was created"
                        },
                        "functionId": 1,
                        "functionName": "format_case_output",
                        "id": "45",
                        "parameters": [],
                        "template": "created case",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "45",
                    "type": "format",
                    "x": 0,
                    "y": 1278
                },
                "46": {
                    "data": {
                        "advanced": {
                            "customName": "format merge output",
                            "customNameId": 0,
                            "description": "Format a note indicating the container was merged into a case",
                            "join": [],
                            "note": "Format a note indicating the container was merged into a case"
                        },
                        "functionId": 2,
                        "functionName": "format_merge_output",
                        "id": "46",
                        "parameters": [],
                        "template": "merged into case",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "46",
                    "type": "format",
                    "x": 340,
                    "y": 1278
                },
                "47": {
                    "data": {
                        "advanced": {
                            "customName": "format join",
                            "customNameId": 0,
                            "description": "Format a note for output based on the result of one of two outputs. The note will contain one of \"merged into case,\" \"created case\", or None.",
                            "drop_none": true,
                            "join": [],
                            "notRequiredJoins": [
                                "find_related_events",
                                "workbook_task_update_1",
                                "workbook_task_update_2"
                            ],
                            "note": "Format a note for output based on the result of one of two outputs. The note will contain one of \"merged into case,\" \"created case\", or None."
                        },
                        "functionId": 3,
                        "functionName": "format_join",
                        "id": "47",
                        "parameters": [
                            "format_case_output:formatted_data",
                            "format_merge_output:formatted_data"
                        ],
                        "template": "{0}{1}",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "47",
                    "type": "format",
                    "x": 340,
                    "y": 1456
                },
                "48": {
                    "data": {
                        "advanced": {
                            "customName": "find related events",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "find_related_containers",
                            "repoName": "community"
                        },
                        "functionId": 1,
                        "functionName": "find_related_events",
                        "id": "48",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "find_related_containers": {
                                "description": "Takes a list of indicator values or field names that may appear in other containers on the system. If any related containers are found, it will produce a list of the related container details.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "A comma separated list of fields to search on. Do not use data paths, only field names. Not compatible with value_list. Field/value combinations are OR'd together. Only containers that share the exact value(s) contained in the exact field(s) will contribute to minimum_match_count. ",
                                        "inputType": "list",
                                        "label": "field_list",
                                        "name": "field_list",
                                        "placeholder": "destinationAddress, requestURL",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "A list of indicator values to search on, such as a file hash or IP address. Values are OR'd together. To search on all indicator values in the container, use \"*\". Not compatible with field_list.",
                                        "inputType": "list",
                                        "label": "value_list",
                                        "name": "value_list",
                                        "placeholder": "artifact:*.cef.destinationAddress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The minimum number of values from the value_list parameter or the fields from the field_list that must match with related containers. Supports an integer or the string 'all'. Adding 'all' will set the minimum_match_count to the length of the number of unique values in the value_list or the number of unique fields in the field_list. If no match count provided, this will default to 1.",
                                        "inputType": "item",
                                        "label": "minimum_match_count",
                                        "name": "minimum_match_count",
                                        "placeholder": "1-100",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "The container to run indicator analysis against. Supports container object or container_id. This container will also be excluded from the results for related_containers.",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional modifier to only consider related containers within a time window. Default is -30d.  Supports year (y), month (m), day (d), hour (h), or minute (m)  Custom function will always set the earliest container window based on the input container \"create_time\".",
                                        "inputType": "item",
                                        "label": "earliest_time",
                                        "name": "earliest_time",
                                        "placeholder": "-30d",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            ""
                                        ],
                                        "description": "Optional comma-separated list of statuses to filter on. Only containers that have statuses matching an item in this list will be included.",
                                        "inputType": "list",
                                        "label": "filter_status",
                                        "name": "filter_status",
                                        "placeholder": "open",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container label"
                                        ],
                                        "description": "Optional comma-separated list of labels to filter on. Only containers that have labels matching an item in this list will be included.",
                                        "inputType": "list",
                                        "label": "filter_label",
                                        "name": "filter_label",
                                        "placeholder": "events",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional comma-separated list of severities to filter on. Only containers that have severities matching an item in this list will be included.",
                                        "inputType": "list",
                                        "label": "filter_severity",
                                        "name": "filter_severity",
                                        "placeholder": "medium",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to filter containers that are in a case or not. True for only containers in cases, False for only containers not in cases. Default is all containers.",
                                        "inputType": "item",
                                        "label": "filter_in_case",
                                        "name": "filter_in_case",
                                        "placeholder": "True or False",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "find_related_containers",
                                "name": "find_related_containers"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "find_related_containers": {
                                "container": "container:id",
                                "earliest_time": "-24h",
                                "field_list": "risk_object",
                                "filter_in_case": null,
                                "filter_label": "risk_notable",
                                "filter_severity": null,
                                "filter_status": "new, open",
                                "minimum_match_count": "all",
                                "value_list": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "48",
                    "type": "utility",
                    "x": 340,
                    "y": 148
                },
                "8": {
                    "data": {
                        "advanced": {
                            "customName": "related events decision",
                            "customNameId": 0,
                            "description": "Determines if one of the related events is a case",
                            "join": [],
                            "note": "Determines if one of the related events is a case"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "find_related_events:custom_function_result.data.*.container_type",
                                        "value": "case"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "merge to case",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "find_related_events:custom_function_result.data.*.container_id",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "create case",
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 2,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 2,
                                "customName": "do nothing",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "related_events_decision",
                        "id": "8",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "decision",
                    "x": 420,
                    "y": 296
                }
            },
            "notes": "For detailed implementation see https://docs.splunk.com/Documentation/ESSOC/latest/user/Useplaybookpack"
        },
        "input_spec": null,
        "output_spec": [
            {
                "contains": [],
                "datapaths": [
                    "format_join:formatted_data"
                ],
                "deduplicate": false,
                "description": "",
                "metadata": {},
                "name": "merge_result"
            }
        ],
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.0.84310"
    },
    "create_time": "2022-05-26T17:44:47.073141+00:00",
    "draft_mode": false,
    "labels": [
        "risk_notable"
    ],
    "tags": []
}