{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Utility",
    "coa": {
        "data": {
            "description": "Collects possible user and system data types and checks Splunk Enterprise Security for asset and identity data. If there is a match, it will tag the indicator record with \"known asset\" or \"known identity.\"",
            "edges": [
                {
                    "id": "port_0_to_port_3",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_7",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_7_to_port_8",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "id": "port_5_to_port_8",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "id": "port_10_to_port_11",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "id": "port_11_to_port_1",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_7_to_port_12",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "id": "port_12_to_port_4",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "id": "port_8_to_port_13",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_13_to_port_1",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_13_to_port_14",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "14",
                    "targetPort": "14_in"
                },
                {
                    "id": "port_14_to_port_9",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_6_to_port_5",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_4_to_port_16",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_16_to_port_8",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_16_to_port_6",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_9_to_port_17",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_17_to_port_10",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_17_to_port_1",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "8d1f39867cd46b38d7d0bc91539fe1a28c6f5725",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 200,
                    "y": -3.126388037344441e-13
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 200,
                    "y": 2525
                },
                "10": {
                    "data": {
                        "advanced": {
                            "customName": "filter matching assets",
                            "customNameId": 0,
                            "description": "Filter out the user names from \"collect hostnames\" that do not have a matching value in \"find assets\"",
                            "join": [],
                            "note": "Filter out the user names from \"collect hostnames\" that do not have a matching value in \"find assets\""
                        },
                        "functionId": 2,
                        "functionName": "filter_matching_assets",
                        "id": "10",
                        "inputParameters": [
                            "dedup_hosts:custom_function_result.data.*.item",
                            "find_assets:action_result.data.*.asset"
                        ],
                        "outputVariables": [
                            "assets"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "10",
                    "type": "code",
                    "userCode": "    filter_matching_assets__assets = []\n    for asset in dedup_hosts_data___item:\n        for asset_result in find_assets_result_item_0:\n            if asset in asset_result:\n                filter_matching_assets__assets.append(asset)\n    phantom.debug(f'Matching assets: {filter_matching_assets__assets}')\n",
                    "x": 0,
                    "y": 2180
                },
                "11": {
                    "data": {
                        "advanced": {
                            "customName": "tag assets",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "indicator_tag",
                            "repoName": "community"
                        },
                        "functionId": 4,
                        "functionName": "tag_assets",
                        "id": "11",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "indicator_tag": {
                                "description": "Tag an existing indicator record. Tags can be overwritten or appended.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Specifies the indicator which the tag will be added to. Supports a string indicator value or an indicator id.",
                                        "inputType": "item",
                                        "label": "indicator",
                                        "name": "indicator",
                                        "placeholder": "my_indicator",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Comma separated list of tags. Tags should only contain characters Aa-Zz, 0-9, '-', and '_'.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1,tag2,...,tagk",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional input. Either \"true\" or \"false\" with default as \"false\". If set to \"true\", existing tags on the indicator record will be replaced by the provided input. If set to \"false\", the new tags will be appended to the existing indicator tags.",
                                        "inputType": "item",
                                        "label": "overwrite",
                                        "name": "overwrite",
                                        "placeholder": "false",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "indicator_tag",
                                "name": "indicator_tag"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "indicator_tag": {
                                "indicator": "filter_matching_assets:custom_function:assets",
                                "overwrite": null,
                                "tags": "known_asset"
                            }
                        }
                    },
                    "errors": {},
                    "id": "11",
                    "type": "utility",
                    "userCode": "\n    parameters = []\n    for asset in filter_matching_assets__assets:\n        parameters.append({\n        \"indicator\": asset,\n        \"tags\": \"known_asset\"\n        })\n\n",
                    "x": 0,
                    "y": 2377
                },
                "12": {
                    "data": {
                        "advanced": {
                            "customName": "dedup users",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "list_deduplicate",
                            "repoName": "community"
                        },
                        "functionId": 5,
                        "functionName": "dedup_users",
                        "id": "12",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "list_deduplicate": {
                                "description": "Remove non-unique items from a list.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "A list of items to deduplicate",
                                        "inputType": "list",
                                        "label": "input_list",
                                        "name": "input_list",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "list_deduplicate",
                                "name": "list_deduplicate"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "list_deduplicate": {
                                "input_list": "collect_users:custom_function_result.data.*.artifact_value"
                            }
                        }
                    },
                    "errors": {},
                    "id": "12",
                    "type": "utility",
                    "x": 90,
                    "y": 476
                },
                "13": {
                    "data": {
                        "advanced": {
                            "customName": "hostnames decision",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "collect_hostnames:custom_function_result.data.*.artifact_value",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "hostnames exist",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "continue to end",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "hostnames_decision",
                        "id": "13",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "13",
                    "type": "decision",
                    "x": 260,
                    "y": 1486
                },
                "14": {
                    "data": {
                        "advanced": {
                            "customName": "dedup hosts",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "list_deduplicate",
                            "repoName": "community"
                        },
                        "functionId": 6,
                        "functionName": "dedup_hosts",
                        "id": "14",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "list_deduplicate": {
                                "description": "Remove non-unique items from a list.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "A list of items to deduplicate",
                                        "inputType": "list",
                                        "label": "input_list",
                                        "name": "input_list",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "list_deduplicate",
                                "name": "list_deduplicate"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "list_deduplicate": {
                                "input_list": "collect_hostnames:custom_function_result.data.*.artifact_value"
                            }
                        }
                    },
                    "errors": {},
                    "id": "14",
                    "type": "utility",
                    "x": 90,
                    "y": 1666
                },
                "16": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": ">",
                                        "param": "find_identities:action_result.summary.total_events",
                                        "value": "0"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "results found",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "no results",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 4,
                        "functionName": "decision_4",
                        "id": "16",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "decision",
                    "x": 170,
                    "y": 816
                },
                "17": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": ">",
                                        "param": "find_assets:action_result.summary.total_events",
                                        "value": "0"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "results exist",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "no results",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 5,
                        "functionName": "decision_5",
                        "id": "17",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "decision",
                    "x": 170,
                    "y": 1998
                },
                "3": {
                    "data": {
                        "advanced": {
                            "customName": "collect users",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "collect_by_cef_type",
                            "repoName": "community"
                        },
                        "functionId": 1,
                        "functionName": "collect_users",
                        "id": "3",
                        "selectMore": false,
                        "tab": "customFunctions",
                        "type": "utility",
                        "utilities": {
                            "collect_by_cef_type": {
                                "description": "Collect all artifact values that match the desired CEF data types, such as \"ip\", \"url\", \"sha1\", or \"all\". Optionally also filter for artifacts that have the specified tags.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "Container ID or container object.",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The CEF data type to collect values for. This could be a single string or a comma separated list such as \"hash,filehash,file_hash\". The special value \"all\" can also be used to collect all field values from all artifacts.",
                                        "inputType": "item",
                                        "label": "data_types",
                                        "name": "data_types",
                                        "placeholder": "data_type1, data_type2, data_type3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "If tags are provided, only return fields from artifacts that have all of the provided tags. This could be an individual tag or a comma separated list.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1,tag2,tag3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Defaults to 'new'. Define custom scope. Advanced Settings Scope is not passed to a custom function. Options are 'all' or 'new'.",
                                        "inputType": "item",
                                        "label": "scope",
                                        "name": "scope",
                                        "placeholder": "new",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "collect_by_cef_type",
                                "name": "collect_by_cef_type"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "collect_by_cef_type": {
                                "container": "container:id",
                                "data_types": "user, user name, username, user_name",
                                "scope": "all",
                                "tags": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "3",
                    "type": "utility",
                    "x": 180,
                    "y": 147.99999999999994
                },
                "4": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "find identities",
                            "customNameId": 0,
                            "description": "Locate identities in Enterprise Security based on usernames in the event.",
                            "join": [],
                            "note": "Locate identities in Enterprise Security based on usernames in the event."
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "find_identities",
                        "id": "4",
                        "parameters": {
                            "command": "| inputlookup",
                            "query": {
                                "functionId": 1,
                                "parameters": [
                                    "dedup_users:custom_function_result.data.*.item"
                                ],
                                "template": "identity_lookup_expanded | search identity IN (\n%%\n\"{0}\"\n%%\n)\n| eval category=mvjoin(category, \"; \")"
                            }
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            },
                            {
                                "data_type": "string",
                                "default": "search",
                                "field": "command"
                            }
                        ],
                        "tab": "byConnector",
                        "type": "action"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "action",
                    "x": 90,
                    "y": 638
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "tag identities",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "indicator_tag",
                            "repoName": "community"
                        },
                        "functionId": 2,
                        "functionName": "tag_identities",
                        "id": "5",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "indicator_tag": {
                                "description": "Tag an existing indicator record. Tags can be overwritten or appended.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Specifies the indicator which the tag will be added to. Supports a string indicator value or an indicator id.",
                                        "inputType": "item",
                                        "label": "indicator",
                                        "name": "indicator",
                                        "placeholder": "my_indicator",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Comma separated list of tags. Tags should only contain characters Aa-Zz, 0-9, '-', and '_'.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1,tag2,...,tagk",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional input. Either \"true\" or \"false\" with default as \"false\". If set to \"true\", existing tags on the indicator record will be replaced by the provided input. If set to \"false\", the new tags will be appended to the existing indicator tags.",
                                        "inputType": "item",
                                        "label": "overwrite",
                                        "name": "overwrite",
                                        "placeholder": "false",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "indicator_tag",
                                "name": "indicator_tag"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "indicator_tag": {
                                "indicator": "filter_matching_identities:custom_function:identities",
                                "overwrite": null,
                                "tags": "known_identity"
                            }
                        }
                    },
                    "errors": {},
                    "id": "5",
                    "type": "utility",
                    "userCode": "\n    parameters = []\n    for identity in filter_matching_identities__identities:\n        parameters.append({\n        \"indicator\": identity,\n        \"tags\": \"known_identity\"\n        })\n\n",
                    "x": 0,
                    "y": 1180
                },
                "6": {
                    "data": {
                        "advanced": {
                            "customName": "filter matching identities",
                            "customNameId": 0,
                            "description": "Filter out the user names from \"Collect Users\" that do not have a matching value in \"Find Identities\"",
                            "join": [],
                            "note": "Filter out the user names from \"Collect Users\" that do not have a matching value in \"Find Identities\""
                        },
                        "functionId": 1,
                        "functionName": "filter_matching_identities",
                        "id": "6",
                        "inputParameters": [
                            "dedup_users:custom_function_result.data.*.item",
                            "find_identities:action_result.data.*.identity"
                        ],
                        "outputVariables": [
                            "identities"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "code",
                    "userCode": "    filter_matching_identities__identities = []\n    for user in dedup_users_data___item:\n        for identity_result in find_identities_result_item_0:\n            if user in identity_result:\n                filter_matching_identities__identities.append(user)\n    phantom.debug(f'Matching identities: {filter_matching_identities__identities}')\n",
                    "x": 0,
                    "y": 996
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "users decision",
                            "customNameId": 0,
                            "description": "Determine if any identities were found.",
                            "join": [],
                            "note": "Determine if any identities were found."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "collect_users:custom_function_result.data.*.artifact_value",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "users exist",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "continue to assets",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "users_decision",
                        "id": "7",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "decision",
                    "x": 260,
                    "y": 296
                },
                "8": {
                    "data": {
                        "advanced": {
                            "customName": "collect hostnames",
                            "customNameId": 0,
                            "join": [],
                            "notRequiredJoins": [
                                "collect_users",
                                "tag_identities",
                                "find_identities"
                            ]
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "collect_by_cef_type",
                            "repoName": "community"
                        },
                        "functionId": 3,
                        "functionName": "collect_hostnames",
                        "id": "8",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "collect_by_cef_type": {
                                "description": "Collect all artifact values that match the desired CEF data types, such as \"ip\", \"url\", \"sha1\", or \"all\". Optionally also filter for artifacts that have the specified tags.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "Container ID or container object.",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The CEF data type to collect values for. This could be a single string or a comma separated list such as \"hash,filehash,file_hash\". The special value \"all\" can also be used to collect all field values from all artifacts.",
                                        "inputType": "item",
                                        "label": "data_types",
                                        "name": "data_types",
                                        "placeholder": "data_type1, data_type2, data_type3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "If tags are provided, only return fields from artifacts that have all of the provided tags. This could be an individual tag or a comma separated list.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1,tag2,tag3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Defaults to 'new'. Define custom scope. Advanced Settings Scope is not passed to a custom function. Options are 'all' or 'new'.",
                                        "inputType": "item",
                                        "label": "scope",
                                        "name": "scope",
                                        "placeholder": "new",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "collect_by_cef_type",
                                "name": "collect_by_cef_type"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "collect_by_cef_type": {
                                "container": "container:id",
                                "data_types": "host, host name, hostname, host_name, ip",
                                "scope": "all",
                                "tags": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "8",
                    "type": "utility",
                    "x": 180,
                    "y": 1338
                },
                "9": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "find assets",
                            "customNameId": 0,
                            "description": "Locate assets in Enterprise Security based hostnames in the event.",
                            "join": [],
                            "note": "Locate assets in Enterprise Security based hostnames in the event."
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "find_assets",
                        "id": "9",
                        "parameters": {
                            "command": "| inputlookup",
                            "query": {
                                "functionId": 2,
                                "parameters": [
                                    "dedup_hosts:custom_function_result.data.*.item"
                                ],
                                "template": "asset_lookup_by_str | search asset IN (\n%%\n\"{0}\"\n%%\n)\n| eval category=mvjoin(category, \"; \")"
                            }
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            },
                            {
                                "data_type": "string",
                                "default": "search",
                                "field": "command"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "action",
                    "x": 90,
                    "y": 1828
                }
            },
            "notes": "Map the run query to your Splunk asset. Ensure Asset and Identity data is populated in Enterprise Security."
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.1.84890"
    },
    "create_time": "2022-06-13T16:42:11.709648+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": [
        "risk_notable"
    ]
}