{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "comments": "This playbook will ingest OKTA events logs into Sentinel.",
        "author": "Yaniv Shasha"
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "OktaEvents-to-Sentinel",
            "type": "String"
        },
        "UserName": {
            "defaultValue": "<username>@<domain>",
            "type": "string"
        },
        "OktaURL": {
            "type": "string",
            "defaultValue": "Enter your okta instance url"
        },
        "APIKey": {
            "type": "string",
            "defaultValue": "Enter your okta API Key"
        }
    },
    "variables": {

        "azureloganalyticsdatacollector": "[concat('azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
        "azuremonitorlogs": "[concat('azuremonitorlogs-', parameters('PlaybookName'))]"

    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azureloganalyticsdatacollector')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('UserName')]",
                "customParameterValues": {
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azuremonitorlogs')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('UserName')]",
                "customParameterValues": {
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "LogicAppsCategory": "security"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('azureloganalyticsdatacollector'))]",
                "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogs'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {
                            },
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 1
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "For_each": {
                            "foreach": "@body('Parse_JSON')",
                            "actions": {
                                "Send_Data": {
                                    "runAfter": {
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "@{items('For_each')}",
                                        "headers": {
                                            "Log-Type": "Okta_Events",
                                            "time-generated-field": "@{utcNow()}"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/api/logs"
                                    }
                                }
                            },
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "For_each_2": {
                            "foreach": "@body('Run_query_and_list_results')?['value']",
                            "actions": {
                                "Parse_JSON_2": {
                                    "runAfter": {
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@items('For_each_2')",
                                        "schema": {
                                            "properties": {
                                                "value": {
                                                    "items": {
                                                        "properties": {
                                                            "max_published_t": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "max_published_t"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Run_query_and_list_results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "HTTP": {
                            "runAfter": {
                                "For_each_2": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "headers": {
                                    "Accept": "application/json",
                                    "Authorization": "SSWS @{variables('APIKey')}"
                                },
                                "method": "GET",
                                "uri": "[concat('https://', parameters('OktaURL'), '/api/v1/logs?startDate=@{first(body(''Parse_JSON_2''))?[''max_published_t'']}')]"
                            }
                        },
                        "Initialize_variable": {
                            "runAfter": {
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "APIKey",
                                        "type": "string",
                                        "value": "[parameters('APIKey')]"
                                    }
                                ]
                            }
                        },
                        "Parse_JSON": {
                            "runAfter": {
                                "HTTP": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('HTTP')",
                                "schema": {
                                    "properties": {
                                        "actor": {
                                            "properties": {
                                                "alternateId": {
                                                    "type": "string"
                                                },
                                                "displayName": {
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "authenticationContext": {
                                            "properties": {
                                                "authenticationStep": {
                                                    "type": "integer"
                                                },
                                                "externalSessionId": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "client": {
                                            "properties": {
                                                "device": {
                                                    "type": "string"
                                                },
                                                "ipAddress": {
                                                    "type": "string"
                                                },
                                                "userAgent": {
                                                    "properties": {
                                                        "browser": {
                                                            "type": "string"
                                                        },
                                                        "os": {
                                                            "type": "string"
                                                        },
                                                        "rawUserAgent": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "zone": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "debugContext": {
                                            "properties": {
                                                "debugData": {
                                                    "properties": {
                                                        "requestUri": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "displayMessage": {
                                            "type": "string"
                                        },
                                        "eventType": {
                                            "type": "string"
                                        },
                                        "legacyEventType": {
                                            "type": "string"
                                        },
                                        "outcome": {
                                            "properties": {
                                                "result": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "published": {
                                            "type": "string"
                                        },
                                        "severity": {
                                            "type": "string"
                                        },
                                        "transaction": {
                                            "properties": {
                                                "id": {
                                                    "type": "string"
                                                },
                                                "type": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "uuid": {
                                            "type": "string"
                                        },
                                        "version": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "Run_query_and_list_results": {
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "union isfuzzy=true\n(print published_t=(now()-30d)), //querying max 30 days ago\n(Okta_Events_CL| summarize arg_max(published_t, *)) //latest message\n| summarize max(published_t)\n| project max_published_t = (max_published_t + 1ms)",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/queryData",
                                "queries": {
                                    "resourcegroups": "",
                                    "resourcename": "",
                                    "resourcetype": "",
                                    "subscriptions": "",
                                    "timerange": "Last 7 days"
                                }
                            }
                        }
                    },
                    "outputs": {
                    }
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureloganalyticsdatacollector": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azureloganalyticsdatacollector'))]",
                                "connectionName": "[variables('azureloganalyticsdatacollector')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                            },
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogs'))]",
                                "connectionName": "[variables('azuremonitorlogs')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}