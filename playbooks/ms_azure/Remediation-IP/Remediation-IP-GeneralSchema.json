{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "title": "PlaybookName",
    "description": "Description",
    "mainSteps": [
      "When a new incident is created:",
      "1. step",
      "2. step"
    ],
    "prerequisites": [ "1.preq", "2. preq" ],
    "lastUpdateTime": "0000-00-00T00:00:00.000Z",
    "entities": [ "IP" ],
    "tags": [ "Remediation" ],
    "support": {
      "tier": "community"
    },
    "author": {
      "name": "Author"
    }
  },
  "parameters": {
    "PlaybookName": {
      "defaultValue": "PlaybookName",
      "type": "string",
      "metadata": {
        "description": "Name of the playbook (Logic Apps resource) which will be created"
      }
    },
    "ConnectorName": {
      "defaultValue": "ConnectorName",
      "type": "string",
      "metadata": {
        "description": "Name of the connector (Logic Apps custom connector resource) which will be created"
      }
    }
  },
  "variables": {
    "LogicAppConnectorConnectionName": "[concat('LogicAppConnector-', parameters('PlaybookName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('LogicAppConnectorConnectionName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/',parameters('ConnectorName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[parameters('PlaybookName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('LogicAppConnectorConnectionName'))]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "Hosts": {
                      "items": {
                        "properties": {
                          "Hostname": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "Hostname"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "runtimeConfiguration": {
                "concurrency": {
                  "runs": 1
                }
              }
            }
          },
          "actions": {
            "Condition_to_check_the_scope": {
              "actions": {
                "Response": {
                  "runAfter": {},
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": "@outputs('Compose_HTTP_Response')",
                    "statusCode": 200
                  },
                  "operationOptions": "Asynchronous"
                }
              },
              "runAfter": {
                "Filter_array": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "Compose_HTTP_Failed_Resposne": {
                    "runAfter": {
                      "Create_HTML_table": [
                        "Succeeded"
                      ]
                    },
                    "type": "Compose",
                    "inputs": "Compose Http Response by including a. logo of the product b. playbook name c. Table which contains the host and actions information."
                  },
                  "Create_HTML_table": {
                    "runAfter": {
                      "Scope_output": [
                        "Succeeded"
                      ]
                    },
                    "type": "Table",
                    "inputs": {
                      "columns": [
                        {
                          "header": "MethodName",
                          "value": "@item()?['name']"
                        },
                        {
                          "header": "Error",
                          "value": "@item()?['error']?['message']"
                        },
                        {
                          "header": "Status",
                          "value": "@item()?['status']"
                        }
                      ],
                      "format": "HTML",
                      "from": "@outputs('Scope_output')"
                    }
                  },
                  "Response_if_playbook_get(s)_failed": {
                    "runAfter": {
                      "Compose_HTTP_Failed_Resposne": [
                        "Succeeded"
                      ]
                    },
                    "type": "Response",
                    "kind": "Http",
                    "inputs": {
                      "body": "@outputs('Compose_HTTP_Failed_Resposne')",
                      "statusCode": 500
                    },
                    "operationOptions": "Asynchronous"
                  },
                  "Scope_output": {
                    "runAfter": {},
                    "type": "Compose",
                    "inputs": "@body('Filter_array')"
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "lessOrEquals": [
                      "@length(body('Filter_array'))",
                      0
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Filter_array": {
              "runAfter": {
                "Scope": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@result('Scope')",
                "where": "@equals(item()?['status'], 'Failed')"
              }
            },
            "Scope": {
              "actions": {
                "Create_HTML_table_-_IP_devices": {
                  "type": "Table",
                  "inputs": {
                    "columns": [
                      {
                        "header": "Host",
                        "value": ""
                      },
                      {
                        "header": "Action",
                        "value": ""
                      }
                    ],
                    "format": "HTML",
                    "from": [
                      {
                        "Host": "",
                        "Action": ""
                      }
                    ]
                  }
                },
                "Compose": {
                  "type": "Compose",
                  "inputs": "<img src=\"https://avatars.githubusercontent.com/u/2071378?s=280&v=4\" alt=\"Lamp\" width=\"32\" height=\"32\">"
                },
                "Compose_HTTP_Response": {
                  "type": "Compose",
                  "inputs": "Compose Http Response by including a. logo of the product b. playbook name c. Table which contains the host and actions information."
                }
              },
              "runAfter": {
              },
              "type": "Scope"
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "LogicAppConnector": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('LogicAppConnectorConnectionName'))]",
                "connectionName": "[variables('LogicAppConnectorConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/',parameters('ConnectorName'))]"
              }
            }
          }
        }
      }
    }
  ]
}