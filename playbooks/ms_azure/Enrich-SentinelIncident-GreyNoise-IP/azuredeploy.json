{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "comments": "This playbook uses the GreyNoise APIs to automatically enrich IP entities in incidents generated by Sentinel.",
        "author": "Nathan Swift"
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "GreyNoise-IP-Enrichment",
            "type": "string"
        },
        "GreyNoiseAPIKey": {
            "defaultValue": "",
            "type": "string"
        },
        "SentinelWorkspaceName": {
            "defaultValue": "",
            "type": "string"
        },
        "UserName": {
            "defaultValue": "<username>@<domain>",
            "type": "string"
        },
        "WorkspaceID": {
            "defaultValue": "your-workspaceID",
            "type": "string"
        },
        "WorkspaceKey": {
            "defaultValue": "your-workspaceKey",
            "type": "securestring"
        }
    },
    "variables": {
        "AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('PlaybookName'))]",
        "azureloganalyticsdatacollectorConnectionName": "[concat('azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
        "azuremonitorlogsConnectionName": "[concat('azuremonitorlogs-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azuremonitorlogsConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('UserName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azureloganalyticsdatacollectorConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "SendtoLogAnalytics",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                },
                "parameterValues": {
                    "username": "[parameters('workspaceId')]",
                    "password": "[parameters('workspaceKey')]"
                }               
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('UserName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "tags": {
            "LogicAppsCategory": "security"
        },
        "dependsOn": [
            "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
            "[resourceId('Microsoft.Web/connections', variables('azureloganalyticsdatacollectorConnectionName'))]",
            "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogsConnectionName'))]"
        ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "GreyNoiseKey": {
                            "defaultValue": "[parameters('GreyNoiseAPIKey')]",
                            "type": "String"
                        },
                        "SentinelWorkspaceName": {
                            "defaultValue": "[parameters('SentinelWorkspaceName')]",
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "14_Days_From_Incident": {
                            "runAfter": {},
                            "type": "Expression",
                            "kind": "SubtractFromTime",
                            "inputs": {
                                "baseTime": "@triggerBody()?['object']?['properties']?['createdTimeUtc']",
                                "interval": 14,
                                "timeUnit": "Day"
                            },
                            "description": "May be used for a KQL Sentinel lookback for IPs seen in previous logs 14 days ago"
                        },
                        "Filter_IPs_Only": {
                            "runAfter": {
                                "Initialize_variable_Scans": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Query",
                            "inputs": {
                                "from": "@array(triggerBody()?['object']?['properties']?['relatedEntities'])",
                                "where": "@equals(item()?['kind'], 'Ip')"
                            },
                            "description": "Filter only the Entity IPs to send to GreyNoise"
                        },
                        "For_each_IP_Entity": {
                            "foreach": "@variables('PublicIPEntities')",
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "Check_if_IP_is_Seen_in_GreyNoise": {
                                            "actions": {
                                                "Add_comment_to_incident_(V3)_4": {
                                                    "runAfter": {
                                                        "Update_incident": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": {
                                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                                            "message": "<p><span style=\"font-size: 24px\">IP not observed scanning the internet in the last 90 Days or contained in RIOT data set.<br>\n</span><span style=\"font-size: 24px\">@{items('For_each_IP_Entity')}</span><span style=\"font-size: 24px\"></span></p>"
                                                        },
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "/Incidents/Comment"
                                                    }
                                                },
                                                "Update_incident": {
                                                    "runAfter": {},
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": {
                                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                                            "severity": "High",
                                                            "tagsToAdd": {
                                                                "TagsToAdd": [
                                                                    {
                                                                        "Tag": "NotObserved:@{body('Parse_JSON_IP_Context_Output')?['ip']}"
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                            }
                                                        },
                                                        "method": "put",
                                                        "path": "/Incidents"
                                                    },
                                                    "description": "Raise the Incident to High and Label the Incident with unseen ip address that was not found in GreyNoise"
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON_IP_Context_Output": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "else": {
                                                "actions": {
                                                    "Add_comment_to_incident_(V3)_2": {
                                                        "runAfter": {
                                                            "Run_query_and_visualize_results_IP_Geo": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "ApiConnection",
                                                        "inputs": {
                                                            "body": {
                                                                "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                "message": "<p><span style=\"font-size: 24px\">GreyNoise has observed IP address while scanning the Intenet in the last 90 Days<br>\n<br>\nIP General Information</span><br>\n@{base64ToString(body('Run_query_and_visualize_results_IP_Main')?['attachmentContent'])}<br>\n<br>\n<span style=\"font-size: 24px\">IP Detail Information</span><br>\n@{base64ToString(body('Run_query_and_visualize_results_IP_Detail')?['attachmentContent'])}<br>\n<br>\n<span style=\"font-size: 24px\">IP Geo Information</span><br>\n@{base64ToString(body('Run_query_and_visualize_results_IP_Geo')?['attachmentContent'])}<br>\n<br>\n<span style=\"font-size: 24px\"></span><span style=\"font-size: 24px\">@{variables('GreyNoiseVizURL')}</span><span style=\"font-size: 24px\"></span></p>"
                                                            },
                                                            "host": {
                                                                "connection": {
                                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                }
                                                            },
                                                            "method": "post",
                                                            "path": "/Incidents/Comment"
                                                        }
                                                    },
                                                    "Compose_IP_Detail": {
                                                        "runAfter": {
                                                            "Set_variable_IP_Main": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "Compose",
                                                        "inputs": {
                                                            "Bot": "@body('Parse_JSON_IP_Context_Output')?['bot']",
                                                            "IPAddress": "@body('Parse_JSON_IP_Context_Output')?['ip']",
                                                            "OS": "@body('Parse_JSON_IP_Context_Output')?['metadata']?['os']",
                                                            "Scans": "@variables('Scans')",
                                                            "Spoofable": "@body('Parse_JSON_IP_Context_Output')?['spoofable']",
                                                            "Tor": "@body('Parse_JSON_IP_Context_Output')?['metadata']?['tor']",
                                                            "VPN": "@body('Parse_JSON_IP_Context_Output')?['vpn']",
                                                            "VPNService": "@body('Parse_JSON_IP_Context_Output')?['vpn_service']"
                                                        },
                                                        "description": "create a unique json object for detail level IP context information"
                                                    },
                                                    "Compose_IP_Geo": {
                                                        "runAfter": {
                                                            "Set_variable_IP_Detail": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "Compose",
                                                        "inputs": {
                                                            "ASN": "@body('Parse_JSON_IP_Context_Output')?['metadata']?['asn']",
                                                            "Category": "@body('Parse_JSON_IP_Context_Output')?['metadata']?['category']",
                                                            "City": "@body('Parse_JSON_IP_Context_Output')?['metadata']?['city']",
                                                            "Country": "@body('Parse_JSON_IP_Context_Output')?['metadata']?['country']",
                                                            "CountryCode": "@body('Parse_JSON_IP_Context_Output')?['metadata']?['country_code']",
                                                            "IPAddress": "@body('Parse_JSON_IP_Context_Output')?['ip']",
                                                            "Organization": "@body('Parse_JSON_IP_Context_Output')?['metadata']?['organization']",
                                                            "RDNS": "@body('Parse_JSON_IP_Context_Output')?['metadata']?['rdns']",
                                                            "Region": "@body('Parse_JSON_IP_Context_Output')?['metadata']?['region']"
                                                        },
                                                        "description": "create a unique json object for geo based level IP context information"
                                                    },
                                                    "Compose_IP_Main": {
                                                        "runAfter": {
                                                            "For_each_Scans": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "Compose",
                                                        "inputs": {
                                                            "Actor": "@body('Parse_JSON_IP_Context_Output')?['actor']",
                                                            "CVE": "@variables('CVE')",
                                                            "Classification": "@body('Parse_JSON_IP_Context_Output')?['classification']",
                                                            "FirstSeen": "@body('Parse_JSON_IP_Context_Output')?['first_seen']",
                                                            "IPAddress": "@body('Parse_JSON_IP_Context_Output')?['ip']",
                                                            "LastSeen": "@body('Parse_JSON_IP_Context_Output')?['last_seen']",
                                                            "Observed": "@body('Parse_JSON_IP_Context_Output')?['seen']",
                                                            "Tags": "@variables('Tags')"
                                                        },
                                                        "description": "create a unique json object for high level IP context information"
                                                    },
                                                    "For_each_CVE": {
                                                        "foreach": "@body('Parse_JSON_IP_Context_Output')?['cve']",
                                                        "actions": {
                                                            "Append_to_string_variable_CVE": {
                                                                "runAfter": {},
                                                                "type": "AppendToStringVariable",
                                                                "inputs": {
                                                                    "name": "CVE",
                                                                    "value": "@{item()} - "
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Send_IPContext_Data_to_Sentinel": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "Foreach"
                                                    },
                                                    "For_each_Scans": {
                                                        "foreach": "@body('Parse_JSON_IP_Context_Output')?['raw_data']?['scan']",
                                                        "actions": {
                                                            "Append_to_string_variable_Scans": {
                                                                "runAfter": {
                                                                    "Parse_JSON_Scans": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "AppendToStringVariable",
                                                                "inputs": {
                                                                    "name": "Scans",
                                                                    "value": "@{body('Parse_JSON_Scans')?['protocol']} : @{body('Parse_JSON_Scans')?['port']} || "
                                                                }
                                                            },
                                                            "Parse_JSON_Scans": {
                                                                "runAfter": {},
                                                                "type": "ParseJson",
                                                                "inputs": {
                                                                    "content": "@item()",
                                                                    "schema": {
                                                                        "properties": {
                                                                            "port": {
                                                                                "type": "integer"
                                                                            },
                                                                            "protocol": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "For_each_Tags": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "Foreach"
                                                    },
                                                    "For_each_Tags": {
                                                        "foreach": "@body('Parse_JSON_IP_Context_Output')?['tags']",
                                                        "actions": {
                                                            "Append_to_string_variable_Tags": {
                                                                "runAfter": {},
                                                                "type": "AppendToStringVariable",
                                                                "inputs": {
                                                                    "name": "Tags",
                                                                    "value": "@{item()} - "
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "For_each_CVE": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "Foreach"
                                                    },
                                                    "Run_query_and_visualize_results_IP_Detail": {
                                                        "runAfter": {
                                                            "Run_query_and_visualize_results_IP_Main": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "ApiConnection",
                                                        "inputs": {
                                                            "body": "let result = print myDynamicValue = dynamic( @{variables('IPDetail')})\n| mv-expand myDynamicValue\n| evaluate bag_unpack(myDynamicValue)\n| project IPAddress, OS, Spoofable, Bot, Tor, VPN, VPNService, Scans\n| sort by IPAddress asc;\nresult",
                                                            "host": {
                                                                "connection": {
                                                                    "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                                                }
                                                            },
                                                            "method": "post",
                                                            "path": "/visualizeQuery",
                                                            "queries": {
                                                                "resourcegroups": "@triggerBody()?['workspaceInfo']?['ResourceGroupName']",
                                                                "resourcename": "@parameters('SentinelWorkspaceName')",
                                                                "resourcetype": "Log Analytics Workspace",
                                                                "subscriptions": "@triggerBody()?['workspaceInfo']?['SubscriptionId']",
                                                                "timerange": "Last 24 hours",
                                                                "visType": "Html Table"
                                                            }
                                                        },
                                                        "description": "cleanup the order presented for the HTML table IP Detail"
                                                    },
                                                    "Run_query_and_visualize_results_IP_Geo": {
                                                        "runAfter": {
                                                            "Run_query_and_visualize_results_IP_Detail": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "ApiConnection",
                                                        "inputs": {
                                                            "body": "let result = print myDynamicValue = dynamic(@{variables('IPGeo')} )\n| mv-expand myDynamicValue\n| evaluate bag_unpack(myDynamicValue)\n| project IPAddress, Country, City, Region, CountryCode, ASN, Organization, Category, RDNS\n| sort by IPAddress asc;\nresult",
                                                            "host": {
                                                                "connection": {
                                                                    "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                                                }
                                                            },
                                                            "method": "post",
                                                            "path": "/visualizeQuery",
                                                            "queries": {
                                                                "resourcegroups": "@triggerBody()?['workspaceInfo']?['ResourceGroupName']",
                                                                "resourcename": "@parameters('SentinelWorkspaceName')",
                                                                "resourcetype": "Log Analytics Workspace",
                                                                "subscriptions": "@triggerBody()?['workspaceInfo']?['SubscriptionId']",
                                                                "timerange": "Last 24 hours",
                                                                "visType": "Html Table"
                                                            }
                                                        }
                                                    },
                                                    "Run_query_and_visualize_results_IP_Main": {
                                                        "runAfter": {
                                                            "Set_variable_GreyNoiseVizURL2": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "ApiConnection",
                                                        "inputs": {
                                                            "body": "let result = print myDynamicValue = dynamic(@{variables('IPMain')})\n| mv-expand myDynamicValue\n| evaluate bag_unpack(myDynamicValue)\n| project IPAddress, Observed, FirstSeen, LastSeen, Actor, Classification, Tags, CVE\n| sort by IPAddress asc;\nresult",
                                                            "host": {
                                                                "connection": {
                                                                    "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                                                }
                                                            },
                                                            "method": "post",
                                                            "path": "/visualizeQuery",
                                                            "queries": {
                                                                "resourcegroups": "@triggerBody()?['workspaceInfo']?['ResourceGroupName']",
                                                                "resourcename": "@parameters('SentinelWorkspaceName')",
                                                                "resourcetype": "Log Analytics Workspace",
                                                                "subscriptions": "@triggerBody()?['workspaceInfo']?['SubscriptionId']",
                                                                "timerange": "Last 24 hours",
                                                                "visType": "Html Table"
                                                            }
                                                        },
                                                        "description": "cleanup the order presented for the HTML table IP Main"
                                                    },
                                                    "Send_IPContext_Data_to_Sentinel": {
                                                        "runAfter": {},
                                                        "type": "ApiConnection",
                                                        "inputs": {
                                                            "body": "@{body('Parse_JSON_IP_Context_Output')}",
                                                            "headers": {
                                                                "Log-Type": "GreyNoiseIPContext",
                                                                "time-generated-field": "@triggerBody()?['object']?['properties']?['createdTimeUtc']"
                                                            },
                                                            "host": {
                                                                "connection": {
                                                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                                }
                                                            },
                                                            "method": "post",
                                                            "path": "/api/logs"
                                                        },
                                                        "description": "Send results into Sentinel custom data table for further use or correlation in other logs."
                                                    },
                                                    "Set_variable_CVE": {
                                                        "runAfter": {
                                                            "Set_variable_Tags": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "CVE",
                                                            "value": "@{null}"
                                                        }
                                                    },
                                                    "Set_variable_GreyNoiseVizURL2": {
                                                        "runAfter": {
                                                            "Set_variable_IP_Geo": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "GreyNoiseVizURL",
                                                            "value": "https://www.greynoise.io/viz/ip/@{items('For_each_IP_Entity')}"
                                                        }
                                                    },
                                                    "Set_variable_IP_Detail": {
                                                        "runAfter": {
                                                            "Compose_IP_Detail": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "IPDetail",
                                                            "value": [
                                                                "@outputs('Compose_IP_Detail')"
                                                            ]
                                                        }
                                                    },
                                                    "Set_variable_IP_Geo": {
                                                        "runAfter": {
                                                            "Compose_IP_Geo": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "IPGeo",
                                                            "value": [
                                                                "@outputs('Compose_IP_Geo')"
                                                            ]
                                                        }
                                                    },
                                                    "Set_variable_IP_Main": {
                                                        "runAfter": {
                                                            "Compose_IP_Main": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "IPMain",
                                                            "value": [
                                                                "@outputs('Compose_IP_Main')"
                                                            ]
                                                        }
                                                    },
                                                    "Set_variable_Scans": {
                                                        "runAfter": {
                                                            "Set_variable_CVE": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "Scans",
                                                            "value": "@{null}"
                                                        }
                                                    },
                                                    "Set_variable_Tags": {
                                                        "runAfter": {
                                                            "Add_comment_to_incident_(V3)_2": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "Tags",
                                                            "value": "@{null}"
                                                        }
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@body('Parse_JSON_IP_Context_Output')?['seen']",
                                                            "@false"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If",
                                            "description": "When an IP is not seen in GreyNoise's sensors this could be indicative of a unique attack targeted rather than a scanner \\ bot from the Internet"
                                        },
                                        "GreyNoise_IP_Context": {
                                            "runAfter": {},
                                            "type": "Http",
                                            "inputs": {
                                                "headers": {
                                                    "key": "@parameters('GreyNoiseKey')"
                                                },
                                                "method": "GET",
                                                "uri": "https://api.greynoise.io/v2/noise/context/@{items('For_each_IP_Entity')}"
                                            },
                                            "description": "Lookup IP context with GreyNoise"
                                        },
                                        "Parse_JSON_IP_Context_Output": {
                                            "runAfter": {
                                                "GreyNoise_IP_Context": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('GreyNoise_IP_Context')",
                                                "schema": {
                                                    "properties": {
                                                        "actor": {
                                                            "type": "string"
                                                        },
                                                        "bot": {
                                                            "type": "boolean"
                                                        },
                                                        "classification": {
                                                            "type": "string"
                                                        },
                                                        "cve": {
                                                            "type": "array"
                                                        },
                                                        "first_seen": {
                                                            "type": "string"
                                                        },
                                                        "ip": {
                                                            "type": "string"
                                                        },
                                                        "last_seen": {
                                                            "type": "string"
                                                        },
                                                        "metadata": {
                                                            "properties": {
                                                                "asn": {
                                                                    "type": "string"
                                                                },
                                                                "category": {
                                                                    "type": "string"
                                                                },
                                                                "city": {
                                                                    "type": "string"
                                                                },
                                                                "country": {
                                                                    "type": "string"
                                                                },
                                                                "country_code": {
                                                                    "type": "string"
                                                                },
                                                                "organization": {
                                                                    "type": "string"
                                                                },
                                                                "os": {
                                                                    "type": "string"
                                                                },
                                                                "rdns": {
                                                                    "type": "string"
                                                                },
                                                                "region": {
                                                                    "type": "string"
                                                                },
                                                                "tor": {
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "raw_data": {
                                                            "properties": {
                                                                "hassh": {
                                                                    "type": "array"
                                                                },
                                                                "ja3": {
                                                                    "type": "array"
                                                                },
                                                                "scan": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "port": {
                                                                                "type": "integer"
                                                                            },
                                                                            "protocol": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "port",
                                                                            "protocol"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "web": {
                                                                    "properties": {},
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "seen": {
                                                            "type": "boolean"
                                                        },
                                                        "spoofable": {
                                                            "type": "boolean"
                                                        },
                                                        "tags": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "vpn": {
                                                            "type": "boolean"
                                                        },
                                                        "vpn_service": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "GreyNoise_RIOT": [
                                            "Succeeded",
                                            "Failed"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Add_comment_to_incident_(V3)": {
                                                "runAfter": {
                                                    "Run_query_and_visualize_results_IP_RIOT": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": {
                                                        "incidentArmId": "@triggerBody()?['object']?['id']",
                                                        "message": "<p><span style=\"font-size: 24px\">IP address is contained in RIOT Dataset<br>\n<br>\nGeneral Information<br>\n</span><span style=\"font-size: 12px\"></span><span style=\"font-size: 12px\">@{base64ToString(body('Run_query_and_visualize_results_IP_RIOT')?['attachmentContent'])}</span><span style=\"font-size: 12px\"><br>\n</span><span style=\"font-size: 24px\"><br>\n</span><span style=\"font-size: 14px\">Explanation: </span><span style=\"font-size: 14px\">@{body('GreyNoise_RIOT')?['explanation']}</span><span style=\"font-size: 14px\"><br>\n<br>\nReference:&nbsp;</span><span style=\"font-size: 14px\">@{body('GreyNoise_RIOT')?['reference']}</span><span style=\"font-size: 14px\"><br>\n<br>\n</span><span style=\"font-size: 24px\"></span><span style=\"font-size: 24px\">@{variables('GreyNoiseVizURL')}</span><span style=\"font-size: 24px\"></span></p>"
                                                    },
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/Incidents/Comment"
                                                }
                                            },
                                            "Compose_IP_RIOT": {
                                                "runAfter": {
                                                    "Send_RIOT_Data_to_Sentinel": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "Compose",
                                                "inputs": {
                                                    "Category": "@body('GreyNoise_RIOT')?['category']",
                                                    "Description": "@body('GreyNoise_RIOT')?['description']",
                                                    "IPAddress": "@body('GreyNoise_RIOT')?['ip']",
                                                    "LastUpdated": "@body('GreyNoise_RIOT')?['last_updated']",
                                                    "Name": "@body('GreyNoise_RIOT')?['name']"
                                                }
                                            },
                                            "Parse_JSON_IP_RIOT": {
                                                "runAfter": {},
                                                "type": "ParseJson",
                                                "inputs": {
                                                    "content": "@body('GreyNoise_RIOT')",
                                                    "schema": {
                                                        "properties": {
                                                            "category": {
                                                                "type": "string"
                                                            },
                                                            "description": {
                                                                "type": "string"
                                                            },
                                                            "explanation": {
                                                                "type": "string"
                                                            },
                                                            "ip": {
                                                                "type": "string"
                                                            },
                                                            "last_updated": {
                                                                "type": "string"
                                                            },
                                                            "logo_url": {
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "reference": {
                                                                "type": "string"
                                                            },
                                                            "riot": {
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "Run_query_and_visualize_results_IP_RIOT": {
                                                "runAfter": {
                                                    "Update_incident_2": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": "let result = print myDynamicValue = dynamic(@{variables('ipriot')})\n| mv-expand myDynamicValue\n| evaluate bag_unpack(myDynamicValue)\n| project IPAddress, Name, Category, Description, LastUpdated\n| sort by IPAddress asc;\nresult",
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/visualizeQuery",
                                                    "queries": {
                                                        "resourcegroups": "@triggerBody()?['workspaceInfo']?['ResourceGroupName']",
                                                        "resourcename": "@parameters('SentinelWorkspaceName')",
                                                        "resourcetype": "Log Analytics Workspace",
                                                        "subscriptions": "@triggerBody()?['workspaceInfo']?['SubscriptionId']",
                                                        "timerange": "Last 24 hours",
                                                        "visType": "Html Table"
                                                    }
                                                }
                                            },
                                            "Send_RIOT_Data_to_Sentinel": {
                                                "runAfter": {
                                                    "Parse_JSON_IP_RIOT": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": "@{body('Parse_JSON_IP_RIOT')}",
                                                    "headers": {
                                                        "Log-Type": "GreyNoiseIPRIOT",
                                                        "time-generated-field": "@triggerBody()?['object']?['properties']?['createdTimeUtc']"
                                                    },
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/api/logs"
                                                },
                                                "description": "Send results into Sentinel custom data table for further use or correlation in other logs."
                                            },
                                            "Set_variable_GreyNoiseVizURL": {
                                                "runAfter": {
                                                    "Set_variable_IP_RIOT": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "GreyNoiseVizURL",
                                                    "value": "https://viz.greynoise.io/riot/@{items('For_each_IP_Entity')}"
                                                }
                                            },
                                            "Set_variable_IP_RIOT": {
                                                "runAfter": {
                                                    "Compose_IP_RIOT": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "IPRIOT",
                                                    "value": [
                                                        "@outputs('Compose_IP_RIOT')"
                                                    ]
                                                }
                                            },
                                            "Update_incident_2": {
                                                "runAfter": {
                                                    "Set_variable_GreyNoiseVizURL": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": {
                                                        "incidentArmId": "@triggerBody()?['object']?['id']",
                                                        "severity": "Low",
                                                        "tagsToAdd": {
                                                            "TagsToAdd": [
                                                                {
                                                                    "Tag": "ObservedRIOT:@{items('For_each_IP_Entity')}"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                        }
                                                    },
                                                    "method": "put",
                                                    "path": "/Incidents"
                                                },
                                                "description": "Lower the Incident to Low and Label the Incident with observed and rule out (RIOT) ip address that was found in GreyNoise RIOT Dataset"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@body('GreyNoise_RIOT')?['riot']",
                                                    "@false"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "GreyNoise_RIOT": {
                                    "runAfter": {},
                                    "type": "Http",
                                    "inputs": {
                                        "headers": {
                                            "Key": "@parameters('GreyNoiseKey')"
                                        },
                                        "method": "GET",
                                        "uri": "https://api.greynoise.io/v2/riot/@{items('For_each_IP_Entity')}"
                                    },
                                    "description": "Look up to see if IP is benin or malicious or not seen. | RIOT identifies IPs from known benign services and organizations that commonly cause false positives in network security and threat intelligence products"
                                }
                            },
                            "runAfter": {
                                "For_each_IP_Entity_RFC1918": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "description": "with each IP lookup in GreyNoise and add for a HTML Table",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "For_each_IP_Entity_RFC1918": {
                            "foreach": "@body('Filter_IPs_Only')",
                            "actions": {
                                "Condition_2": {
                                    "actions": {},
                                    "runAfter": {
                                        "KQLRFC1918Check": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Append_to_array_variable": {
                                                "runAfter": {},
                                                "type": "AppendToArrayVariable",
                                                "inputs": {
                                                    "name": "PublicIPEntities",
                                                    "value": "@items('For_each_IP_Entity_RFC1918')?['properties']?['address']"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@body('KQLRFC1918Check')?['value'][0]?['result']",
                                                    true
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If",
                                    "description": "Check if the ip address is Private then do nothing, if public then add to array for GreyNoise APIs to be run"
                                },
                                "KQLRFC1918Check": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "datatable(ip_string:string)\n[\n    \"@{items('For_each_IP_Entity_RFC1918')?['properties']?['address']}\"\n]\n| extend result = ipv4_is_private(ip_string)",
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/queryData",
                                        "queries": {
                                            "resourcegroups": "@triggerBody()?['workspaceInfo']?['ResourceGroupName']",
                                            "resourcename": "@parameters('SentinelWorkspaceName')",
                                            "resourcetype": "Log Analytics Workspace",
                                            "subscriptions": "@triggerBody()?['workspaceInfo']?['SubscriptionId']",
                                            "timerange": "Last 24 hours"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_PublicIPEntities": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "description": "Filter out private ips"
                        },
                        "Initialize_array_variable_IP_Detail": {
                            "runAfter": {
                                "Initialize_array_variable_IP_Main": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "IPDetail",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            },
                            "description": "Used for an array of IP entities and GreyNoise results from each ip detail level information"
                        },
                        "Initialize_array_variable_IP_Geo": {
                            "runAfter": {
                                "Initialize_array_variable_IP_Detail": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "IPGeo",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            },
                            "description": "Used for an array of IP entities and GreyNoise results from each ip geo level information"
                        },
                        "Initialize_array_variable_IP_Main": {
                            "runAfter": {
                                "Initialize_variable_GreyNoiseVizURL": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "IPMain",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            },
                            "description": "Used for an array of IP entities and GreyNoise results from each ip high level information"
                        },
                        "Initialize_array_variable_IP_RIOT": {
                            "runAfter": {
                                "Initialize_array_variable_IP_Geo": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "IPRIOT",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            },
                            "description": "used in discover of benin ip address"
                        },
                        "Initialize_variable_CVE": {
                            "runAfter": {
                                "Initialize_array_variable_IP_RIOT": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "CVE",
                                        "type": "string",
                                        "value": "@{null}"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_GreyNoiseVizURL": {
                            "runAfter": {
                                "14_Days_From_Incident": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "GreyNoiseVizURL",
                                        "type": "string",
                                        "value": "@{null}"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_PublicIPEntities": {
                            "runAfter": {
                                "Filter_IPs_Only": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "PublicIPEntities",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_Scans": {
                            "runAfter": {
                                "Initialize_variable_Tags": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Scans",
                                        "type": "string",
                                        "value": "@{null}"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_Tags": {
                            "runAfter": {
                                "Initialize_variable_CVE": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Tags",
                                        "type": "string",
                                        "value": "@{null}"
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                                "connectionName": "[variables('AzureSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                            },
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogsConnectionName'))]",
                                "connectionName": "[variables('azuremonitorlogsConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                            },
                            "AzureLogAnalyticsDataCollector": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azureloganalyticsdatacollectorConnectionName'))]",
                                "connectionName": "[variables('azureloganalyticsdatacollectorConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}