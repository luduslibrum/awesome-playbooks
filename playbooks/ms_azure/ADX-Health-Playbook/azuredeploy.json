{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "PlaybookName": {
            "defaultValue": "ADX-health-playbook",
            "type": "String"
        },
        "startTime": {
            "defaultValue": "25h",
            "type": "String",
            "metadata": {
                "description": "Start time for your query"
        }
        },
        "endTime": {
            "defaultValue": "30m",
            "type": "String",
            "metadata": {
                "description": "End time for your query. Avoid choosing less than 20 minutes to avoid false positives due to the expected lag between LA and ADX"
        }
        },
        "Mailing list": {
            "defaultValue": "test@xyz.com",
            "type": "String",
            "metadata": {
                "description": "The mailing list you wish to notify in case there is an abnormal delay between Log Analytics and ADX ingestion."
        }
        },
        "clusterName": {
            "defaultValue": "cluster",
            "type": "String",
            "metadata": {
                "description": "The name of your ADX cluster"
        }
        },
        "clusterRegion": {
            "defaultValue": "region",
            "type": "String",
            "metadata": {
                "description": "Region of your cluster name, e.g. eastus"
        }
        },
        "databaseName": {
            "defaultValue": "database",
            "type": "String",
            "metadata": {
                "description": "End time for your query. Avoid choosing less than 20 minutes to avoid false positives due to the expected lag between LA and ADX"
        }
        }
    },
    "variables": {
      
        "o365ConnectionName": "[concat('o365-', parameters('PlaybookName'))]",
        "kustoConnectionName": "[concat('kusto', parameters('PlaybookName'))]",
        "azuremonitorlogsConnectionName": "[concat('azuremon-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('o365ConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('kustoConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "parameterValueType": "Alternative",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/kusto')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azuremonitorlogsConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
              "displayName": "[parameters('PlaybookName')]",
              "customParameterValues": {},
              "api": {
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
              }
            }
          },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('o365ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('kustoConnectionName'))]"

            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "Cluster name": {
                            "defaultValue": "[parameters('clusterName')]",
                            "type": "String"
                        },
                        "Cluster region": {
                            "defaultValue": "[parameters('clusterRegion')]",
                            "type": "String"
                        },
                        "Database name": {
                            "defaultValue": "[parameters('databaseName')]",
                            "type": "String"
                        },
                        "endTime": {
                            "defaultValue": "[parameters('endTime')]",
                            "type": "String"
                        },
                        
                        "startTime": {
                            "defaultValue": "[parameters('startTime')]",
                            "type": "String"
                        },
                        "Mailing list": {
                            "defaultValue": "[parameters('Mailing list')]",
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 24
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "For_each_table": {
                            "foreach": "@body('Run_query_and_list_results')?['value']",
                            "actions": {
                                "For_each_ADX_Table": {
                                    "foreach": "@body('Parse_JSON_-_Get_ADX_results')",
                                    "actions": {
                                        "Compare_LA_and_ADX": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "let startTime = ago(@{parameters('startTime')});\nlet endTime = ago(@{parameters('endTime')});\nlet ADXInfo = split('@{items('For_each_ADX_Table')['Column1']}', ',');\nlet ADXLastTM = todatetime(ADXInfo[2]);\nlet ADXTable = datatable(Source:string)\n['ADX database']\n| extend Entries=tolong(ADXInfo[0]), Last=tolong(ADXInfo[1]), LastTM=tostring(ADXInfo[2]);\nlet LATablePart = @{items('For_each_table')?['TableName']}\n| where TimeGenerated between (startTime .. endTime);   \nlet LATable = LATablePart\n| summarize Entries = count(), Last = datetime_diff(\"second\",now(), max(TimeGenerated)), LastTM=max(TimeGenerated)\n| project Source='Log Analytics workspace', PositiveEntries=Entries, PositiveLast=Last, LastTM\n| extend NegativeEntries = -PositiveEntries, NegativeLast= -PositiveLast;\nlet counterMore = toscalar(LATablePart\n| where TimeGenerated > ADXLastTM\n| count);\nlet LALastTM = toscalar(LATable | project LastTM);\nlet DiffTable=(\nunion ADXTable, (LATable | project Entries=NegativeEntries, Last=NegativeLast, LastTM)\n| summarize E=sum(Entries), L=sum(Last) \n| project Source='Difference', Entries=E, Last=L\n| extend LastTM = ADXLastTM-LALastTM\n| extend ['New in Log Analytics'] = counterMore\n);\nunion (ADXTable | project Source, Entries, LastTM ),\n(LATable | project Source, Entries=PositiveEntries, tostring(LastTM)),\n(DiffTable | project Source, Entries, tostring(LastTM), ['New in Log Analytics'])\n\n",
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/queryData",
                                                "queries": {
                                                    "resourcegroups": "",
                                                    "resourcename": "",
                                                    "resourcetype": "",
                                                    "subscriptions": "",
                                                    "timerange": "set in query"
                                                }
                                            }
                                        },
                                        "For_each_3": {
                                            "foreach": "@body('Parse_JSON')",
                                            "actions": {
                                                "For_each_Difference": {
                                                    "foreach": "@array(items('For_each_3')['New in Log Analytics'])",
                                                    "actions": {
                                                        "Condition": {
                                                            "actions": {
                                                                "Create_HTML_table": {
                                                                    "runAfter": {},
                                                                    "type": "Table",
                                                                    "inputs": {
                                                                        "format": "HTML",
                                                                        "from": "@body('Compare_LA_and_ADX')?['value']"
                                                                    }
                                                                },
                                                                "Send_an_email_(V2)": {
                                                                    "runAfter": {
                                                                        "Create_HTML_table": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "ApiConnection",
                                                                    "inputs": {
                                                                        "body": {
                                                                            "Body": "<p>Hi,<br>\n<br>\nYou are receiving this email because a potential delay in your ADX long-term retention tables has been detected and this requires your attention.<br>\n<br>\nThere is a <strong>difference of </strong><strong>@{items('For_each_3')['New in Log Analytics']}</strong><strong> logs</strong> that have been ingested in the <strong></strong><strong>@{items('For_each_table')?['TableName']}</strong><strong> table in Log Analytics</strong> when compared to your ADX table.<br>\nThe the period designated in the logic app is <strong>between </strong><strong>@{parameters('startTime')}</strong><strong> ago and </strong><strong>@{parameters('endTime')}</strong><strong> ago</strong>. If you are checking for logs received in the last 20 minutes or less, it is likely that the delay is expected.<br>\n<br>\nPlease see below the comparison between the logs received in Log Analytics and ADX and the timestamp for the last log received in the designated time period:<br>\n@{body('Create_HTML_table')}<br>\n<br>\nPlease refer to the <strong>ADXvsLA Workbook</strong> for further information. You can download it from GitHub.<br>\n<br>\nThanks,</p>",
                                                                            "Subject": "WARNING! Potential delay in ADX ingestion detected",
                                                                            "To": "@parameters('mailing list')"
                                                                        },
                                                                        "host": {
                                                                            "connection": {
                                                                                "name": "@parameters('$connections')['office365']['connectionId']"
                                                                            }
                                                                        },
                                                                        "method": "post",
                                                                        "path": "/v2/Mail"
                                                                    }
                                                                }
                                                            },
                                                            "runAfter": {},
                                                            "expression": {
                                                                "and": [
                                                                    {
                                                                        "not": {
                                                                            "equals": [
                                                                                "@items('For_each_3')['New in Log Analytics']",
                                                                                "@null"
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "greater": [
                                                                            "@items('For_each_3')['New in Log Analytics']",
                                                                            0
                                                                        ]
                                                                    }
                                                                ]
                                                            },
                                                            "type": "If"
                                                        }
                                                    },
                                                    "runAfter": {},
                                                    "type": "Foreach"
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "Parse_JSON": {
                                            "runAfter": {
                                                "Compare_LA_and_ADX": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Compare_LA_and_ADX')?['value']",
                                                "schema": {
                                                    "items": {
                                                        "properties": {
                                                            "Entries": {
                                                                "type": "integer"
                                                            },
                                                            "LastTM": {
                                                                "type": "string"
                                                            },
                                                            "New in Log Analytics": {},
                                                            "Source": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "Source",
                                                            "Entries",
                                                            "LastTM",
                                                            "New in Log Analytics"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON_-_Get_ADX_results": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "Parse_JSON_-_Get_ADX_results": {
                                    "runAfter": {
                                        "Run_query_for_each_table": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Run_query_for_each_table')?['value']",
                                        "schema": {
                                            "items": {
                                                "properties": {
                                                    "Column1": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "Column1"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    }
                                },
                                "Run_query_for_each_table": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "let startTime = ago(@{parameters('startTime')});\nlet endTime = ago(@{parameters('endTime')});\nadx('@{parameters('Cluster name')}.@{parameters('Cluster region')}/@{parameters('Database name')}').@{items('For_each_table')?['TableName']}\n| where TimeGenerated between (startTime .. endTime)   \n| project TimeGenerated\n| summarize Entries = count(), last_log = datetime_diff(\"second\",now(), max(TimeGenerated)), LastTM=max(TimeGenerated)\n| project strcat(Entries, ',', last_log, ',', LastTM)",
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/queryData",
                                        "queries": {
                                            "resourcegroups": "",
                                            "resourcename": "",
                                            "resourcetype": "Log Analytics Workspace",
                                            "subscriptions": "",
                                            "timerange": "set in query"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Run_query_and_list_results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Run_query_and_list_results": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "cluster": "https://@{parameters('Cluster name')}.@{parameters('Cluster region')}.kusto.windows.net",
                                    "csl": ".show tables\n| where TableName !contains \"Raw\"",
                                    "db": "@parameters('Database name')"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['kusto']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/ListKustoResults/false"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogsConnectionName'))]",
                                "connectionName": "[variables('azuremonitorlogsConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                              },
                            "kusto": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('kustoConnectionName'))]",
                                "connectionName": "[variables('kustoConnectionName')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                },
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/kusto')]"
                            },
                            "office365": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('o365ConnectionName'))]",
                                "connectionName": "office365",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}
