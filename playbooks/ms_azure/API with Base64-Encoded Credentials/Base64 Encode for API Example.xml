<?xml version="1.0" encoding="utf-8"?>
<Workflow>
  <WorkflowInfo Name="Base64 Encode for API Example" Description="Simple template to demonstrate how to base64-encode a string containing login credentials to be used with an API." Details="&lt;p&gt;Simple template to demonstrate how to base64-encode a string containing login credentials to be used with an API, such as ZenDesk.&amp;nbsp;Note that there are many APIs that require the username and password combination to be transmitted in this format.&amp;nbsp;This is achieved by utilizing the following Powershell code:&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;[string]$string_plaintext = &quot;%login_credentials%&quot;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;$string_encoded = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($string_plaintext))&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;echo $string_encoded&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;...where the original username/password combination stored in the Workflow variable &lt;strong&gt;login_credentials&lt;/strong&gt; is stored in the PowerShell code as &lt;strong&gt;string_plaintext&lt;/strong&gt;, and &lt;strong&gt;string_encoded &lt;/strong&gt;stores those credentials in base64.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;This template continues by showing an interaction with an API by using the &lt;strong&gt;HTTPRequest &lt;/strong&gt;activity, in this case the one provided by ZenDesk.&amp;nbsp;Here, we send the base64-encoded credentials in the header as the value of the &lt;strong&gt;Authorization &lt;/strong&gt;parameter.&amp;nbsp;This value is as follows:&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Basic %login_credentials%&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;...where &lt;strong&gt;Basic &lt;/strong&gt;is a static portion of this parameter and &lt;strong&gt;login_credentials &lt;/strong&gt;contains the base-64 encoded credentials we created with the PowerShell code.&amp;nbsp;The template continues by showing the JSON results being stored and converted into a table.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Note that this WorkFlow template will not function unless you have an active ZenDesk login, which must replace the placeholder values currently specified in the &lt;strong&gt;store_credentials &lt;/strong&gt;activity. Furthermore, the organization ID specified in the &lt;strong&gt;http_request &lt;/strong&gt;activity must be replaced with a valid ID from your own account in order to see results returned from the API call.&lt;/p&gt;" XML="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;SequentialWorkflowActivity xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/workflow&quot; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; x:Name=&quot;CustomWorkflow&quot; x:Class=&quot;WorkflowDesignerControl.CustomWorkflow&quot;&gt;&lt;MemorySet x:Name=&quot;store_credentials&quot; id=&quot;430&quot; name=&quot;MemorySet&quot; visible=&quot;True&quot; disabled=&quot;False&quot; isFavorite=&quot;False&quot; IsValid=&quot;True&quot; notes=&quot;Store username and password combination to be used to authenticate with external API.&quot; Timeout=&quot;00:01:00&quot; TimeInSeconds=&quot;60&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; TargetModuleID=&quot;&quot; TargetModuleName=&quot;&quot; Path=&quot;{x:Null}&quot; DisplayName=&quot;Set Memory&quot; Description=&quot;Allocates a value to a Workflow/Global  variable&quot; VariableScope=&quot;Workflow&quot; IsSaved=&quot;False&quot; VariableName=&quot;login_credentials&quot; VariableValue=&quot;user@domain.com:password&quot; IsAppend=&quot;False&quot; TypeName=&quot;MemorySet&quot; /&gt;&lt;PowerShellScript x:Name=&quot;base64_encode_credentials&quot; id=&quot;87&quot; name=&quot;PowerShellScript&quot; visible=&quot;True&quot; disabled=&quot;False&quot; isFavorite=&quot;False&quot; IsValid=&quot;True&quot; notes=&quot;Encode the username and password combination into base64 by utilizing the following Powershell code:&amp;#xA;&amp;#xA;[string]$string_plaintext = &amp;quot;%login_credentials%&amp;quot;&amp;#xA;$string_encoded = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($string_plaintext))&amp;#xA;echo $string_encoded&amp;#xA;&amp;#xA;...where the original username/password combination stored in the Workflow variable &amp;quot;login_credentials&amp;quot; is stored in the PowerShell code as &amp;quot;string_plaintext&amp;quot;, and &amp;quot;string_encoded&amp;quot; stores those credentials in base64.&quot; Timeout=&quot;00:01:00&quot; TimeInSeconds=&quot;60&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; TargetModuleID=&quot;&quot; TargetModuleName=&quot;&quot; Path=&quot;{x:Null}&quot; DisplayName=&quot;PowerShell Script&quot; Description=&quot;Executes a Powershell script on a local device&quot; ScriptPath=&quot;&quot; ScriptCode=&quot;[string]$string_plaintext = &amp;quot;%login_credentials%&amp;quot;&amp;#xA;$string_encoded = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($string_plaintext))&amp;#xA;echo $string_encoded&quot; scriptSource=&quot;1&quot; TableAsString=&quot;&quot; HasParams=&quot;0&quot; HostId=&quot;-1&quot; HostName=&quot;{x:Null}&quot; TypeName=&quot;PowerShellScript&quot; /&gt;&lt;HTTPRequest x:Name=&quot;http_request&quot; id=&quot;492&quot; name=&quot;HTTPRequest&quot; visible=&quot;True&quot; disabled=&quot;False&quot; isFavorite=&quot;False&quot; IsValid=&quot;True&quot; notes=&quot;Send an external HTTP request to the ZenDesk API using the base64-encoded credentials we generated using our short Powershell script.&quot; Timeout=&quot;00:01:00&quot; TimeInSeconds=&quot;60&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; TargetModuleID=&quot;&quot; TargetModuleName=&quot;&quot; Path=&quot;{x:Null}&quot; DisplayName=&quot;HTTP Request&quot; Description=&quot;Sends an HTTP request (including headers)&quot; Url=&quot;https://ayehu.zendesk.com/api/v2/organizations/4548783425.json&quot; UserName=&quot;&quot; Password=&quot;&quot; RequestType=&quot;Get&quot; ContentType=&quot;application/json&quot; PostData=&quot;&quot; HeaderData=&quot;Authorization|y|y|Basic %base64_encode_credentials%|x|x|&quot; Proxy=&quot;&quot; SrcUserName=&quot;&quot; SrcPassword=&quot;&quot; Sectype=&quot;TLS12&quot; crtval=&quot;0&quot; SiteId=&quot;-1&quot; SiteName=&quot;&quot; ProxyUrls=&quot;{x:Null}&quot; isChecked=&quot;False&quot; byPass=&quot;False&quot; HostId=&quot;0&quot; HostName=&quot;{x:Null}&quot; TypeName=&quot;HTTPRequest&quot; /&gt;&lt;GetCellValue x:Name=&quot;store_http_result&quot; id=&quot;276&quot; name=&quot;GetCellValue&quot; visible=&quot;True&quot; disabled=&quot;False&quot; isFavorite=&quot;False&quot; IsValid=&quot;True&quot; notes=&quot;Store JSON returned from &amp;quot;http_request&amp;quot;.&quot; Timeout=&quot;00:01:00&quot; TimeInSeconds=&quot;60&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; TargetModuleID=&quot;&quot; TargetModuleName=&quot;&quot; Path=&quot;{x:Null}&quot; DisplayName=&quot;Get Cell Value&quot; Description=&quot;Retrieves a cell's value according to its location in a table&quot; ResultSet=&quot;http_request&quot; ResultSetName=&quot;http_request&quot; RowNumber=&quot;1&quot; ColumnType=&quot;Number&quot; ColumnNumber=&quot;1&quot; TypeName=&quot;GetCellValue&quot; /&gt;&lt;StartJsonSession x:Name=&quot;start_json_session&quot; id=&quot;464&quot; name=&quot;StartJsonSession&quot; visible=&quot;True&quot; disabled=&quot;False&quot; isFavorite=&quot;False&quot; IsValid=&quot;True&quot; notes=&quot;Start new JSON session with results stored in &amp;quot;store_http_result&amp;quot;.&quot; Timeout=&quot;00:01:00&quot; TimeInSeconds=&quot;60&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; TargetModuleID=&quot;&quot; TargetModuleName=&quot;&quot; Path=&quot;{x:Null}&quot; DisplayName=&quot;Start Json Session&quot; Description=&quot;Start Json Session&quot; JsonString=&quot;%store_http_result%&quot; HostId=&quot;0&quot; HostName=&quot;{x:Null}&quot; StartSession=&quot;XML&quot; Password=&quot;{x:Null}&quot; UserName=&quot;{x:Null}&quot; TypeName=&quot;StartJsonSession&quot; /&gt;&lt;JsonToTable x:Name=&quot;create_json_table&quot; id=&quot;463&quot; name=&quot;JsonToTable&quot; visible=&quot;True&quot; disabled=&quot;False&quot; isFavorite=&quot;False&quot; IsValid=&quot;True&quot; notes=&quot;Create table from JSON stored in &amp;quot;store_http_result&amp;quot; based on the keypath &amp;quot;organization&amp;quot;.&quot; Timeout=&quot;00:01:00&quot; TimeInSeconds=&quot;60&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; TargetModuleID=&quot;&quot; TargetModuleName=&quot;&quot; Path=&quot;{x:Null}&quot; DisplayName=&quot;Json To Table&quot; Description=&quot;Json To Table&quot; SessionName=&quot;start_json_session&quot; KeyPath=&quot;organization&quot; HostId=&quot;0&quot; HostName=&quot;{x:Null}&quot; TypeName=&quot;JsonToTable&quot; /&gt;&lt;/SequentialWorkflowActivity&gt;" />
  <Tags>
  </Tags>
</Workflow>
