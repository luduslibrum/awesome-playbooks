{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Zscaler API authentication", 
        "description": "This playbook generates access token in Zscaler API. Call this playbook as a step in functional Zscaler playbooks. The output is a JSessionID which can be used to do other API actions",
        "prerequisites": ["Playbook templates leverage the Zscaler API. To use the Zscaler capabilities, you need a Zscaler API key. Refer this link: [API Developers Guide: Getting Started](https://help.zscaler.com/zia/api-getting-started)"],
        "lastUpdateTime": "2021-07-28T00:00:00.000Z", 
        "entities": [], 
        "tags": ["Utilities"], 
        "support": {
            "tier": "community" 
        },
        "author": {
            "name": "Accenture"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "Zscaler-Authentication-Playbook",
            "type": "String",
            "metadata": {
                "description": "Name of the playbook, used as name for the resources. Use only letters and dashes."
            }
        },
        "Storage account name": {
            "defaultValue": "zscalerauthenticationsa",
            "type": "String",
            "metadata": {
                "description": "Name of the storage account, which will be created by the playbook."
            }
        },
        "Keyvault name": {
            "defaultValue": "zscalerauthenticationkv",
            "type": "String",
            "metadata": {
                "description": "Name of the Azure Keyvault, which will be created by the playbook. A vault's name must be between 3-24 alphanumeric characters. The name must begin with a letter, end with a letter or digit, and not contain consecutive hyphens."
            }
        },
        "Function App name": {
            "defaultValue": "zscalerauthenticationfa",
            "type": "String",
            "metadata": {
                "description": "Name of the Azure Function App, which will be created by the playbook."
            }
        },
        "Zscaler Admin Url": {
            "defaultValue": "https://admin.<zscaler_instance_domain>.net",
            "type": "string",
            "metadata": {
                "description": "Update to a valid Zscaler admin url."
            }
        },
        "Zscaler Key": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "Your Zscaler key."
            }
        },
        "Zscaler Username": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "Your Zscaler username."
            }
        },
        "Zscaler Password": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "Your Zscaler password."
            }
        }
    },
    "variables": {
        "functionAppName": "[parameters('Function App name')]",
        "appServicePlanName": "[parameters('Function App name')]",
        "keyvault_name": "[toLower(parameters('Keyvault name'))]",
        "storageAccountName": "[toLower(parameters('Storage account name'))]"
    },
    "resources": [
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2016-10-01",
            "name": "[variables('keyvault_name')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": true,
                "accessPolicies": [
                ]
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('keyvault_name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
            ],
            "properties": {
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                },
                "parameterValues": {
                    "token:TenantId": "[subscription().tenantId]",
                    "token:grantType": "code",
                    "vaultName": "[variables('KeyVault_name')]"
                }
            }
        },

        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2016-10-01",
            "name": "[concat(variables('keyvault_name'), '/', 'Zscaler-Key')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
            ],
            "properties": {
                "value": "[parameters('Zscaler Key')]",
                "contentType": "string",
                "attributes": {
                    "enabled": true
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2016-10-01",
            "name": "[concat(variables('keyvault_name'), '/', 'Zscaler-Username')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
            ],
            "properties": {
                "value": "[parameters('Zscaler Username')]",
                "contentType": "string",
                "attributes": {
                    "enabled": true
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2016-10-01",
            "name": "[concat(variables('keyvault_name'), '/', 'Zscaler-Password')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]"
            ],
            "properties": {
                "value": "[parameters('Zscaler Password')]",
                "contentType": "string",
                "attributes": {
                    "enabled": true
                }
            }
        },

        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "2021-01-01",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
            }
        },

        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2018-11-01",
            "name": "[variables('functionAppName')]",
            "location": "[resourceGroup().location]",
            "kind": "functionapp",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms',variables('appServicePlanName'))]"
            ],
            "properties": {
                "enabled": true,
                "hostNameSslStates": [
                    {
                        "name": "[concat(variables('functionAppName'), '.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Standard"
                    },
                    {
                        "name": "[concat(variables('functionAppName'), '.scm.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Repository"
                    }
                ],
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "reserved": false,
                "isXenon": false,
                "hyperV": false,
                "siteConfig": {},
                "scmSiteAlsoStopped": false,
                "clientAffinityEnabled": false,
                "clientCertEnabled": false,
                "hostNamesDisabled": false,
                "containerSize": 1536,
                "dailyMemoryTimeQuota": 0,
                "httpsOnly": false,
                "redundancyMode": "None"
            }
        },
        {
            "type": "Microsoft.Web/sites/config",
            "apiVersion": "2018-11-01",
            "name": "[concat(variables('functionAppName'), '/web')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
                "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "numberOfWorkers": 1,
                "defaultDocuments": [
                    "Default.htm",
                    "Default.html",
                    "Default.asp",
                    "index.htm",
                    "index.html",
                    "iisstart.htm",
                    "default.aspx",
                    "index.php"
                ],
                "netFrameworkVersion": "v4.0",
                "phpVersion": "5.6",
                "requestTracingEnabled": false,
                "remoteDebuggingEnabled": false,
                "httpLoggingEnabled": false,
                "logsDirectorySizeLimit": 35,
                "detailedErrorLoggingEnabled": false,
                "publishingUsername": "$zsacler-fa",
                "azureStorageAccounts": {},
                "scmType": "None",
                "use32BitWorkerProcess": true,
                "webSocketsEnabled": false,
                "alwaysOn": false,
                "managedPipelineMode": "Integrated",
                "virtualApplications": [
                    {
                        "virtualPath": "/",
                        "physicalPath": "site\\wwwroot",
                        "preloadEnabled": false
                    }
                ],
                "loadBalancing": "LeastRequests",
                "experiments": {
                    "rampUpRules": []
                },
                "autoHealEnabled": false,
                "cors": {
                    "allowedOrigins": [
                        "https://functions.azure.com",
                        "https://functions-staging.azure.com",
                        "https://functions-next.azure.com"
                    ],
                    "supportCredentials": false
                },
                "localMySqlEnabled": false,
                "ipSecurityRestrictions": [
                    {
                        "ipAddress": "Any",
                        "action": "Allow",
                        "priority": 1,
                        "name": "Allow all",
                        "description": "Allow all access"
                    }
                ],
                "scmIpSecurityRestrictions": [
                    {
                        "ipAddress": "Any",
                        "action": "Allow",
                        "priority": 1,
                        "name": "Allow all",
                        "description": "Allow all access"
                    }
                ],
                "scmIpSecurityRestrictionsUseMain": false,
                "http20Enabled": false,
                "minTlsVersion": "1.2",
                "ftpsState": "AllAllowed",
                "reservedInstanceCount": 0
            }
        },
        {
            "type": "Microsoft.Web/sites/functions",
            "apiVersion": "2018-11-01",
            "name": "[concat(variables('functionAppName'), '/GetApiKey')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
                "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {

                "config": {
                    "bindings": [
                        {
                            "authLevel": "anonymous",
                            "name": "req",
                            "type": "httpTrigger",
                            "direction": "in"
                        },
                        {
                            "name": "res",
                            "type": "http",
                            "direction": "out"
                        }
                    ]
                },
                "files": {
                    "index.js": "module.exports = function (context, data) {  var input = data;    var timestamp = Date.now().toString();    var high = timestamp.substring(timestamp.length - 6);    var low = (parseInt(high) >> 1).toString();    var apiKey = '';    while (low.length < 6) {    low = '0' + low;    }    for (var i = 0; i < high.length; i++) {    apiKey += input.body.key.charAt(parseInt(high.charAt(i)));    }    for (var j = 0; j < low.length; j++) {    apiKey += input.body.key.charAt(parseInt(low.charAt(j)) + 2);    }    context.res = {    body: {      apiKey: apiKey,      timestamp: timestamp    }  };  context.done();};"
                }
            }
        },
        {
            "type": "Microsoft.Web/sites/hostNameBindings",
            "apiVersion": "2018-11-01",
            "name": "[concat(variables('functionAppName'), '/', variables('functionAppName'), '.azurewebsites.net')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
                "[resourceId('Microsoft.Web/serverfarms',variables('appServicePlanName'))]"
            ],
            "properties": {
                "siteName": "zsacler-fa",
                "hostNameType": "Verified"
            }
        },




        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2018-02-01",
            "name": "[variables('appServicePlanName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic"
            },
            "kind": "functionapp",
            "properties": {
                "name": "[variables('appServicePlanName')]",
                "workerSize": "0",
                "workerSizeId": "0",
                "numberOfWorkers": "1"
            }
        },

        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyvault_name'))]",
                "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
                "[resourceId('Microsoft.Web/sites/functions', variables('functionAppName'),'GetApiKey')]",
                "[resourceId('Microsoft.Web/serverfarms',variables('appServicePlanName'))]"

            ],
            "tags": {
                "hidden-SentinelTemplateName": "Zscaler-Authentication",
                "hidden-SentinelTemplateVersion": "1.0"
            },
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {}
                        }
                    },
                    "actions": {
                        "GetApiKey": {
                            "runAfter": {
                                "Get_Zscaler_Password": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function",
                            "inputs": {
                                "body": {
                                    "key": "@body('Get_Zscaler_Key')?['value']"
                                },
                                "function": {
                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('functionAppName'), '/functions/GetApiKey')]"
                                }
                            }
                        },
                        "Get_Zscaler_Key": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Zscaler-Key')}/value"
                            },
                            "runtimeConfiguration": {
                                "secureData": {
                                    "properties": [
                                        "outputs"
                                    ]
                                }
                            }
                        },
                        "Get_Zscaler_Username": {
                            "runAfter": {
                                "Get_Zscaler_Key": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Zscaler-Username')}/value"
                            },
                            "runtimeConfiguration": {
                                "secureData": {
                                    "properties": [
                                        "outputs"
                                    ]
                                }
                            }
                        },
                        "Get_Zscaler_Password": {
                            "runAfter": {
                                "Get_Zscaler_Username": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Zscaler-Password')}/value"
                            },
                            "runtimeConfiguration": {
                                "secureData": {
                                    "properties": [
                                        "outputs"
                                    ]
                                }
                            }
                        },
                        "HTTP": {
                            "runAfter": {
                                "Parse_Response": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "body": {
                                    "apiKey": "@{body('Parse_Response')?['apiKey']}",
                                    "password": "@{body('Get_Zscaler_Password')?['value']}",
                                    "timestamp": "@{body('Parse_Response')?['timestamp']}",
                                    "username": "@{body('Get_Zscaler_Username')?['value']}"
                                },
                                "headers": {
                                    "Cache-Control": "no-cache",
                                    "Content-Type": "application/json"
                                },
                                "method": "POST",
                                "uri": "[concat(parameters('Zscaler Admin Url'), '/api/v1/authenticatedSession')]"
                            }
                        },
                        "Parse_Headers": {
                            "runAfter": {
                                "HTTP": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@outputs('HTTP')['headers']",
                                "schema": {
                                    "properties": {
                                        "Connection": {
                                            "type": "string"
                                        },
                                        "Content-Length": {
                                            "type": "string"
                                        },
                                        "Content-Type": {
                                            "type": "string"
                                        },
                                        "Date": {
                                            "type": "string"
                                        },
                                        "Keep-Alive": {
                                            "type": "string"
                                        },
                                        "Server": {
                                            "type": "string"
                                        },
                                        "Set-Cookie": {
                                            "type": "string"
                                        },
                                        "Strict-Transport-Security": {
                                            "type": "string"
                                        },
                                        "X-Content-Type-Options": {
                                            "type": "string"
                                        },
                                        "X-Frame-Options": {
                                            "type": "string"
                                        },
                                        "X-XSS-Protection": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Parse_Response": {
                            "runAfter": {
                                "GetApiKey": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('GetApiKey')",
                                "schema": {
                                    "properties": {
                                        "apiKey": {
                                            "type": "string"
                                        },
                                        "timestamp": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Response": {
                            "runAfter": {
                                "Parse_Headers": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": {
                                    "cookie": "@{body('Parse_Headers')?['Set-Cookie']}"
                                },
                                "headers": "@outputs('HTTP')['headers']",
                                "statusCode": "@outputs('HTTP')['statusCode']"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('keyvault_name'))]",
                                "connectionName": "keyvault",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId ,'/providers/Microsoft.Web/locations/', resourceGroup().location ,'/managedApis/keyvault')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}