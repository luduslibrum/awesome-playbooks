{
  "flows": [
    {
      "name": "yyy_d_Credential_Dumping_Tools_Service_Installion",
      "nodes": [
        {
          "id": "8b15c79a-56f4-47a1-b853-37b9f9764be9",
          "name": "Credential_Dumping_Tools_Service_Installion",
          "kind": "eventType",
          "isLeaf": false,
          "eventType": "eventType-22",
          "warnings": [],
          "description": "",
          "isExplainable": true,
          "x": 0,
          "y": 0,
          "vertices": [],
          "isEditable": false,
          "isStepImplementable": true,
          "executionDependsOn": [],
          "outputtedNode": false,
          "contentItemIdentifier": {
            "kind": "EventTypeContentKind",
            "id": "eventType-22"
          },
          "categoryKind": "FetchData",
          "linkToTrigger": true,
          "iconTitle": "Fetch Data: Credential_Dumping_Tools_Service_Installion",
          "usedByEventTypes": []
        },
        {
          "id": "22e494c7-69fc-4782-8b78-3c62796e4ae1",
          "name": "Key_Columns",
          "kind": "augmentation",
          "lql": "`select lhub_ts,Service_Account,\nService_Start_Type,\nService_Type,\nService_File_Name,\nService_Name,\nComputer,\nsrc_user,\nTO_JSON(STRUCT(Service_Account, Service_Start_Type, Service_Type, Service_File_Name, Service_Name, src_user)) as search_field \n\n\nfrom Credential_Dumping_Tools_Service_Installion`",
          "operator": "SELECT",
          "isLeaf": false,
          "warnings": [],
          "description": "",
          "isExplainable": true,
          "x": 0,
          "y": 132,
          "vertices": [],
          "isEditable": false,
          "isStepImplementable": true,
          "executionDependsOn": [],
          "outputtedNode": false,
          "formType": "LQLEditor",
          "categoryKind": "Code",
          "iconTitle": "Code: SQL",
          "usedByEventTypes": []
        },
        {
          "id": "03793b16-6e42-4ae1-a617-97332e9c9fb7",
          "name": "Final_Output",
          "kind": "augmentation",
          "lql": "`select * from LogicHub_MDR_Format_Alert_for_Sumo`",
          "operator": "SELECT",
          "isLeaf": false,
          "warnings": [],
          "description": "",
          "isExplainable": true,
          "x": 0,
          "y": 638,
          "vertices": [],
          "isEditable": false,
          "isStepImplementable": true,
          "executionDependsOn": [],
          "outputtedNode": true,
          "formType": "LQLEditor",
          "categoryKind": "Code",
          "iconTitle": "Code: SQL",
          "usedByEventTypes": []
        },
        {
          "id": "3330849e-8174-4d81-af00-1f6f02a6cd18",
          "name": "Output",
          "kind": "output",
          "warnings": [],
          "description": "",
          "nodes": [
            "03793b16-6e42-4ae1-a617-97332e9c9fb7"
          ],
          "isExplainable": true,
          "x": 0,
          "y": 750,
          "vertices": [],
          "isEditable": false,
          "isStepImplementable": true,
          "executionDependsOn": [],
          "outputtedNode": false,
          "categoryKind": "Unknown",
          "iconTitle": "Unknown",
          "usedByEventTypes": []
        },
        {
          "id": "50afe158-7570-464c-ad57-426ebb73245f",
          "name": "Label_By_Tool_Name",
          "kind": "augmentation",
          "lql": "`select *, \nCASE WHEN upper(search_field) regexp \"WCE SERVICE\" OR upper(search_field) regexp \"WCESERVICE\" THEN \"Credential Dumping Tools Service Installion - WCESERVICE\"\nWHEN lower(search_field) regexp \"mimikatz\" OR lower(search_field) regexp \"mimidrv\" THEN \"Credential Dumping Tools Service Installion - Mimikatz\"\nWHEN lower(search_field) regexp \"fgexec\" THEN \"Credential Dumping Tools Service Installation - fgexec\"\nWHEN lower(search_field) regexp \"pwdump\" THEN \"Credential Dumping Tools Service Installation - pwdump\"\nWHEN lower(search_field) regexp \"gsecdump\" THEN \"Credential Dumping Tools Service Installation - gsecdump\"\nWHEN lower(search_field) regexp \"cachedump\" THEN \"Credential Dumping Tools Service Installation - cachedump\"\nElse \"Error - Service Unknown. Please check SIEM for raw logs\"\nEND as alert_title,\n\n\nCASE WHEN upper(search_field) regexp \"WCE SERVICE\" OR upper(search_field) regexp \"WCESERVICE\" THEN  \"LH00226\"\nWHEN lower(search_field) regexp \"mimikatz\" OR lower(search_field) regexp \"mimidrv\" THEN \"LH00227\"\nWHEN lower(search_field) regexp \"fgexec\" THEN \"LH00228\"\nWHEN lower(search_field) regexp \"pwdump\" THEN \"LH00229\"\nWHEN lower(search_field) regexp \"gsecdump\" THEN \"LH00230\"\nWHEN lower(search_field) regexp \"cachedump\" THEN \"LH00181\"\nElse \"Error - Service Unknown. Please check SIEM for raw logs\"\nEND as alert_id\n\nfrom Key_Columns`",
          "operator": "SELECT",
          "isLeaf": false,
          "warnings": [],
          "description": "",
          "isExplainable": true,
          "x": 0,
          "y": 244,
          "vertices": [],
          "isEditable": false,
          "isStepImplementable": true,
          "executionDependsOn": [],
          "outputtedNode": false,
          "formType": "LQLEditor",
          "categoryKind": "Code",
          "iconTitle": "Code: SQL",
          "usedByEventTypes": []
        },
        {
          "id": "c7b4b299-2822-45fe-a5dd-68932187f813",
          "name": "Create_Output",
          "kind": "augmentation",
          "lql": "`select lhub_ts AS alert_time, \nalert_id, \nalert_title, \n\"Credential Dumping\" AS technique, \n\"Credential Access\" AS tactic, \n3 as fidelity_score,\n3 as risk_score,\n9 as lhub_score,\nTO_JSON(STRUCT(Service_Account,Service_Start_Type,Service_Type,Service_File_Name,Service_Name,Computer,src_user))  AS additional_data, \nsrc_user, \" \" AS src_ip, \n\" \" AS dest_ip, \nComputer AS src_machine_name, \n\" \" AS dest_machine_name from Label_By_Tool_Name`",
          "operator": "SELECT",
          "isLeaf": false,
          "warnings": [],
          "description": "",
          "isExplainable": true,
          "x": 0,
          "y": 356,
          "vertices": [],
          "isEditable": false,
          "isStepImplementable": true,
          "executionDependsOn": [],
          "outputtedNode": false,
          "formType": "LQLEditor",
          "categoryKind": "Code",
          "iconTitle": "Code: SQL",
          "usedByEventTypes": []
        },
        {
          "id": "7849e0fe-f2ca-460f-a2f7-e9d6fde18f88",
          "name": "LogicHub_MDR_Format_Alert_for_Sumo",
          "kind": "step",
          "inputs": [
            "c7b4b299-2822-45fe-a5dd-68932187f813"
          ],
          "isLeaf": false,
          "warnings": [],
          "description": "Format event output to send to SumoLogic destination",
          "isExplainable": true,
          "x": 0,
          "y": 468,
          "vertices": [],
          "title": "LogicHub MDR: Format Alert for Sumo",
          "moduleId": "logichub.mdr.format_alert_for_sumo",
          "moduleVersion": {
            "majorVersion": 1,
            "minorVersion": 31,
            "patchVersion": 0,
            "contentResourceVersionBranch": "Local"
          },
          "moduleParameters": {
            "parent0": "Create_Output"
          },
          "stepParams": {
            "kind": "module",
            "title": "LogicHub MDR: Format Alert for Sumo"
          },
          "isEditable": true,
          "isStepImplementable": false,
          "executionDependsOn": [],
          "contentMetadata": {
            "id": "logichub.mdr.format_alert_for_sumo",
            "name": "LogicHub MDR: Format Alert for Sumo",
            "latestAvailableVersion": {
              "majorVersion": 1,
              "minorVersion": 31,
              "patchVersion": 0,
              "contentResourceVersionBranch": "Local"
            }
          },
          "outputtedNode": false,
          "contentItemIdentifier": {
            "kind": "ModuleContentKind",
            "id": "logichub.mdr.format_alert_for_sumo"
          },
          "categoryKind": "Module",
          "iconTitle": "Module: LogicHub MDR: Format Alert for Sumo",
          "usedByEventTypes": []
        }
      ],
      "oldId": "flow-1029",
      "listNames": [],
      "dependentCommands": [],
      "resourceFormatVersion": 2,
      "fileDataSeq": []
    }
  ],
  "baselines": [],
  "eventTypes": [
    {
      "id": "eventType-22",
      "data": {
        "name": "Credential_Dumping_Tools_Service_Installion",
        "query": "_sourceCategory=server/windows/events* event_id=7045 //(\"WCE SERVICE\" OR \"WCESERVICE\" OR \"DumpSvc\" \"fgexec\" OR \"pwdump\" OR \"gsecdump\" OR \"cachedump\" OR \"mimikatz\" OR \"mimidrv\" )\n| parse \"Service Account: *\\\";\" as Service_Account nodrop\n| parse \"Service Start Type: *\\r\\n\" as Service_Start_Type nodrop\n| parse \"Service Type: *\\r\\n\" as Service_Type nodrop\n| parse \"Service File Name: *\\r\\n\" as Service_File_Name nodrop\n| parse \"Service Name: *\\r\\n\" as Service_Name nodrop\n| parse \"Computer = \\\"*\\\";\" as Computer nodrop\n| parse \"Service Account: *\\\";\" as src_user nodrop",
        "connection": "connection-2",
        "connectionTypeEntities": {
          "entities": [
            {
              "connectionType": {
                "connectionType": "sumologic",
                "value": "query"
              },
              "connectionTypeDetail": {
                "query": "_sourceCategory=server/windows/events* event_id=7045 //(\"WCE SERVICE\" OR \"WCESERVICE\" OR \"DumpSvc\" \"fgexec\" OR \"pwdump\" OR \"gsecdump\" OR \"cachedump\" OR \"mimikatz\" OR \"mimidrv\" )\n| parse \"Service Account: *\\\";\" as Service_Account nodrop\n| parse \"Service Start Type: *\\r\\n\" as Service_Start_Type nodrop\n| parse \"Service Type: *\\r\\n\" as Service_Type nodrop\n| parse \"Service File Name: *\\r\\n\" as Service_File_Name nodrop\n| parse \"Service Name: *\\r\\n\" as Service_Name nodrop\n| parse \"Computer = \\\"*\\\";\" as Computer nodrop\n| parse \"Service Account: *\\\";\" as src_user nodrop",
                "connection": "connection-2"
              }
            }
          ]
        },
        "defaultConnectionType": {
          "connectionType": "sumologic",
          "value": "query"
        }
      }
    }
  ],
  "connections": [
    {
      "id": "connection-2",
      "data": {
        "connectionType": "sumologic",
        "name": "SumoLogic",
        "isActive": false,
        "account": "",
        "secret": "",
        "url": "https://api.us2.sumologic.com/api/v1"
      }
    }
  ],
  "modules": [
    {
      "id": "logichub.mdr.format_alert_for_sumo",
      "name": "LogicHub MDR: Format Alert for Sumo",
      "description": "Format event output to send to a SumoLogic destination",
      "templateNodes": [
        {
          "name": "alert_output_for_sumo",
          "templateLQL": "`SELECT \n/* always include lhub_score in the final output */\nlhub_score,\n\n/* format the final JSON output */\nTO_JSON(STRUCT(\n\n/* Required/Standard fields first */\nlhub_score, alert_time,\nlh_batch_end, lh_batch_id, lh_hostname, lh_alert_id,\nalert_id, alert_type, technique, tactic, risk_score, fidelity_score,\n\n/* All other fields EXCEPT additional_data */\nattack_chain, dest_ip, dest_machine_name, dest_machine_fqdn, dest_nt_domain, dest_port, dest_user, src_ip, src_machine_name, src_machine_fqdn, src_nt_domain, src_port, src_user,\n\n/* place additional_data last so it will be at the bottom of the JSON formatted output */\nadditional_data)) AS alert_output\nFROM validate_required_input`",
          "isOutput": true
        },
        {
          "name": "ensure_defined_fields_exist",
          "templateLQL": "ensureTableHasColumns(comment_ensure_table_has_columns, \"lhub_score, lhub_ts, alert_title, alert_time, alert_id, alert_type, technique, tactic, risk_score, fidelity_score, additional_data, attack_chain, dest_ip, dest_machine_name, dest_machine_fqdn, dest_nt_domain, dest_port, dest_user, src_ip, src_machine_name, src_machine_fqdn, src_nt_domain, src_port, src_user\")",
          "isOutput": false
        },
        {
          "name": "final_columns",
          "templateLQL": "`SELECT \n/* Required/standard fields first */\nlh__new_score AS lhub_score,\nlh__new_ts AS lhub_ts,\nlh__new_ts AS alert_time,\nlh_batch_end, lh_batch_id, lh_hostname, lh_alert_id,\nalert_id,\n\n/* Legacy support for \"alert_title\" which is now called \"alert_type\" */\nCOALESCEEMPTY(alert_type, alert_title) AS alert_type,\n\ntechnique, tactic, risk_score, fidelity_score,\n\n/* All other supported fields */\nadditional_data, attack_chain, dest_ip, dest_machine_name, dest_machine_fqdn, dest_nt_domain, dest_port, dest_user, src_ip, src_machine_name, src_machine_fqdn, src_nt_domain, src_port, src_user\n\nFROM calculate_new_score_and_time`",
          "isOutput": false
        },
        {
          "name": "add_batch_metadata",
          "templateLQL": "addExecutionMetadata(ensure_defined_fields_exist)",
          "isOutput": false
        },
        {
          "name": "calculate_new_score_and_time",
          "templateLQL": "`SELECT \n/* If lhub_score = 0, keep it 0, otherwise use the greater of the original value or risk times fidelity */\nCASE DOUBLE(lhub_score) WHEN 0 THEN DOUBLE(lhub_score) ELSE GREATEST(risk_score * fidelity_score, DOUBLE(lhub_score)) END AS lh__new_score,\n\n/* For timestamp, look first for alert_time, then lhub_ts, then batch end time */\nCASE\n  WHEN BIGINT(alert_time) IS NOT NULL THEN BIGINT(alert_time)\n  WHEN BIGINT(lhub_ts) IS NOT NULL THEN BIGINT(lhub_ts) ELSE BIGINT(GET_JSON_OBJECT(lhub_execution_metadata, \"$.interval_end_millis\"))\nEND AS lh__new_ts,\n\nREGEXP_EXTRACT(GET_JSON_OBJECT(lhub_execution_metadata, \"$.batch_url\"), '://(.*?)/') AS lh_hostname,\nREGEXP_EXTRACT(GET_JSON_OBJECT(lhub_execution_metadata, \"$.batch_url\"), '(batch-\\\\d+)$') AS lh_batch_id,\nBIGINT(GET_JSON_OBJECT(lhub_execution_metadata, \"$.interval_end_millis\")) AS lh_batch_end,\n\n/* Generate a unique (mostly) event ID from the batch number + lhub_id */\nBIGINT(PRINTF('%s%s', REGEXP_EXTRACT(GET_JSON_OBJECT(lhub_execution_metadata, \"$.batch_url\"), 'batch-(\\\\d+)$'), lhub_id)) AS lh_alert_id,\n*\nFROM add_batch_metadata`",
          "isOutput": false
        },
        {
          "name": "comment_ensure_table_has_columns",
          "templateLQL": "`\n/* Since some columns are only conditionally required, there has to be a step to explicitly check for values in those fields anyway, so to keep it simple, all possible fields are protected in ensureTableHasColumns, and some are validated later to ensure that they have a value.\n\nFields supported but not part of the final JSON schema:\n- lhub_score - can be used to override final score\n- lhub_ts - when available, used to calculate alert_time\n- alert_title - legacy support, but since renamed to alert_type\n\nNot expected from input but allowed when available:\n- alert_time: calculated from lhub_ts or batch time, but if this is available then we'll accept it as truth\n\nAfter that, ALL SUPPORTED FIELDS from supported schema\nhttps://logichub.atlassian.net/wiki/spaces/CON/pages/797671425/Output+Schema+for+LogicHub+Content\n*/\n\nselect * from %%%parent0%%%`",
          "isOutput": false
        },
        {
          "name": "check_for_required_fields",
          "templateLQL": "`/*\nOnce all calculations are done, verify that all the required fields have values.\nNote that some fields allow empty strings for the time being, as long as they aren't null. This is just to allow us to transition into this new alert schema while we figure it all out.\n*/\n\nSELECT *,\nCASE\n    /* array_sort will put nulls at the end, so this is a quick way to check all required inputs at once */\n    WHEN ELEMENT_AT(ARRAY_SORT(ARRAY(alert_id, alert_type, technique, tactic, risk_score, fidelity_score)), -1) IS NULL THEN 'One or more required inputs is missing or null. Required fields: alert_id, alert_type, technique, tactic, risk_score, fidelity_score'\n    WHEN TRIM(alert_id) = '' THEN 'alert_id cannot be empty'\n    WHEN TRIM(alert_type) = '' THEN 'alert_type cannot be empty'\n    WHEN risk_score NOT IN (1, 2, 3) THEN PRINTF('Invalid value for risk_score (%s). Acceptable values are from 1 (low), 2 (medium) and 3 (high).', risk_score)\n    WHEN fidelity_score NOT IN (1, 2, 3) THEN PRINTF('Invalid value for fidelity_score (%s). Acceptable values are from 1 (low), 2 (medium) and 3 (high).', fidelity_score)\n    WHEN FLOAT(lhub_score) IS NULL THEN 'Unable to calculate lhub_score from provided columns'\n    WHEN lhub_score > 10 OR lhub_score < 0 THEN PRINTF('Invalid value for lhub_score (%s). Acceptable values are from 0-10.', lhub_score)\nEND AS error\n\nFROM final_columns`",
          "isOutput": false
        },
        {
          "name": "validate_required_input",
          "templateLQL": "forceFail(check_for_required_fields, \"error\")",
          "isOutput": false
        }
      ],
      "steps": [
        {
          "name": "Module Parameters",
          "description": "",
          "inputs": [
            {
              "id": "parent0",
              "description": "Parent node",
              "label": "Parent Node",
              "dataType": "node",
              "inputType": "columnSelect",
              "dependsOn": "",
              "columnTemplating": false
            }
          ],
          "isVariadic": false
        }
      ],
      "isPublished": true,
      "author": "chad@logichub.com",
      "categories": [],
      "isEditable": true,
      "integrations": [],
      "innerModules": [],
      "tags": [],
      "moduleVersion": {
        "majorVersion": 1,
        "minorVersion": 31,
        "patchVersion": 0,
        "contentResourceVersionBranch": "Local"
      },
      "isDataSource": "No",
      "resourceFormatVersion": 3,
      "weight": 0
    }
  ],
  "annotations": [],
  "filters": [],
  "ruleSets": [],
  "integrationInstances": [],
  "customLists": [],
  "streams": [],
  "dashboards": [],
  "images": [],
  "codeBlobs": {},
  "customListsData": {},
  "executionScripts": [],
  "userForms": [],
  "flowNodeReferences": [],
  "destinations": [],
  "fileResources": [],
  "fileDataSeq": [],
  "eventModels": [],
  "version": 1
}