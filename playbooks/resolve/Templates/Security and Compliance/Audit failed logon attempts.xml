<TotalExport sourceSystem="NG">
  <Workflows>
    <WorkflowInfo Pnumber="102" Name="Audit failed logon attempts" Description="Audit failed logon attempts" Xoml="&lt;SequentialWorkflowActivity x:Name=&quot;CustomWorkflow&quot; xmlns:ns0=&quot;clr-namespace:GetWindowEventLogs;Assembly=GetWindowEventLogs, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns1=&quot;clr-namespace:GetRowsCount;Assembly=GetRowsCount, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns2=&quot;clr-namespace:CreateMemoryTable;Assembly=CreateMemoryTable, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns3=&quot;clr-namespace:DeleteMemoryTableRows;Assembly=DeleteMemoryTableRows, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns4=&quot;clr-namespace:ReturnValue;Assembly=ReturnValue, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns5=&quot;clr-namespace:Terminate;Assembly=Terminate, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns6=&quot;clr-namespace:Continue;Assembly=Continue, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns7=&quot;clr-namespace:ExitWhile;Assembly=ExitWhile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns8=&quot;clr-namespace:GetCellValue;Assembly=GetCellValue, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns9=&quot;clr-namespace:ExtractLineFromText;Assembly=ExtractLineFromText, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns10=&quot;clr-namespace:ReplaceString;Assembly=ReplaceString, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns11=&quot;clr-namespace:GetRows;Assembly=GetRows, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns12=&quot;clr-namespace:FunctionCalculator;Assembly=FunctionCalculator, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns13=&quot;clr-namespace:SetCellValue;Assembly=SetCellValue, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns14=&quot;clr-namespace:AddMemoryTableRow;Assembly=AddMemoryTableRow, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns15=&quot;clr-namespace:SendEmail;Assembly=SendEmail, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/workflow&quot; x:Class=&quot;WorkflowDesignerControl.CustomWorkflow&quot;&gt;&#xD;&#xA;  &lt;ns0:GetWindowEventLogs Password=&quot;&quot; Description=&quot;Get the logs of the windows according to the event     type.&quot; TimeInSeconds=&quot;0&quot; FilterComputer=&quot;&quot; HostName=&quot;LocalHost&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; DisplayName=&quot;Get Windows Event Logs&quot; IsValid=&quot;True&quot; HostId=&quot;1&quot; FilterSource=&quot;&quot; FilterDescription=&quot;&quot; FilterEventCode=&quot;529&quot; FilterUser=&quot;&quot; MaxAge=&quot;02:00:00&quot; x:Name=&quot;getWindowEventLogs1&quot; Timeout=&quot;00:01:00&quot; FilterType=&quot;&quot; UserName=&quot;&quot; EventType=&quot;Security&quot; FilterCategory=&quot;&quot; TypeName=&quot;GetWindowEventLogs&quot; /&gt;&#xD;&#xA;  &lt;ns1:GetRowsCount IsValid=&quot;True&quot; x:Name=&quot;getRowsCount1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ResultSet=&quot;%getWindowEventLogs1%&quot; DisplayName=&quot;Get Rows Count&quot; ResultSetName=&quot;getWindowEventLogs1&quot; Description=&quot;Gets the     amount of rows in a resultset.&quot; TypeName=&quot;GetRowsCount&quot; /&gt;&#xD;&#xA;  &lt;IfElseActivity x:Name=&quot;ifElseActivity1&quot;&gt;&#xD;&#xA;    &lt;IfElseBranchActivity x:Name=&quot;ifElseBranchActivity1&quot;&gt;&#xD;&#xA;      &lt;ns4:ReturnValue Value=&quot;0&quot; IsValid=&quot;True&quot; x:Name=&quot;returnValue1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ConditionName=&quot;&quot; UseBranchWhenTimeout=&quot;True&quot; UseStoredValue=&quot;False&quot; ConditionType=&quot;Equals&quot; DisplayName=&quot;Return Value&quot; Formula=&quot;=Equals(&amp;quot;&amp;amp;&amp;amp;&amp;amp;&amp;quot;,&amp;quot;0&amp;quot;)&quot; Description=&quot;Use a returned value of a previous activity.&quot; ConditionNumber=&quot;-1&quot; UseCustomeCondition=&quot;False&quot; Type=&quot;UserDefinedValue&quot; TypeName=&quot;ReturnValue&quot; /&gt;&#xD;&#xA;      &lt;ns5:Terminate IsValid=&quot;True&quot; x:Name=&quot;terminate1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; TerminationReason=&quot;No Login Failures&quot; Description=&quot;Terminate the     current branch in workflow&quot; DisplayName=&quot;Terminate&quot; TypeName=&quot;Terminate&quot; /&gt;&#xD;&#xA;    &lt;/IfElseBranchActivity&gt;&#xD;&#xA;    &lt;IfElseBranchActivity x:Name=&quot;ifElseBranchActivity2&quot;&gt;&#xD;&#xA;      &lt;ns4:ReturnValue Value=&quot;0&quot; IsValid=&quot;True&quot; x:Name=&quot;returnValue2&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ConditionName=&quot;&quot; UseBranchWhenTimeout=&quot;False&quot; UseStoredValue=&quot;False&quot; ConditionType=&quot;Not Equals&quot; DisplayName=&quot;Return Value&quot; Formula=&quot;=Not     Equals(&amp;quot;&amp;amp;&amp;amp;&amp;amp;&amp;quot;,&amp;quot;0&amp;quot;)&quot; Description=&quot;Use a returned value of a previous activity.&quot; ConditionNumber=&quot;-1&quot; UseCustomeCondition=&quot;False&quot; Type=&quot;UserDefinedValue&quot; TypeName=&quot;ReturnValue&quot; /&gt;&#xD;&#xA;      &lt;ns6:Continue DisplayName=&quot;Continue&quot; x:Name=&quot;continue1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; IsValid=&quot;True&quot; TypeName=&quot;Continue&quot; Description=&quot;Continue the current workfow or branch&quot; /&gt;&#xD;&#xA;    &lt;/IfElseBranchActivity&gt;&#xD;&#xA;  &lt;/IfElseActivity&gt;&#xD;&#xA;  &lt;ns2:CreateMemoryTable IsValid=&quot;True&quot; x:Name=&quot;createMemoryTable1&quot; ColumnNumber=&quot;3&quot; TableName=&quot;UserReport&quot; RowNumber=&quot;14&quot; isEmptyGrid=&quot;0&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Description=&quot;Creates a     memory table.&quot; DisplayName=&quot;Create Memory Table&quot; TypeName=&quot;CreateMemoryTable&quot; TableAsString=&quot;&amp;lt;NewDataSet&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;xs:schema id=&amp;quot;NewDataSet&amp;quot; xmlns=&amp;quot;&amp;quot; xmlns:xs=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:msdata=&amp;quot;urn:schemas-microsoft-com:xml-msdata&amp;quot;&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;xs:element name=&amp;quot;NewDataSet&amp;quot; msdata:IsDataSet=&amp;quot;true&amp;quot; msdata:MainDataTable=&amp;quot;resultSet&amp;quot; msdata:UseCurrentLocale=&amp;quot;true&amp;quot;&amp;gt;&amp;#xD;&amp;#xA;      &amp;lt;xs:complexType&amp;gt;&amp;#xD;&amp;#xA;        &amp;lt;xs:choice minOccurs=&amp;quot;0&amp;quot; maxOccurs=&amp;quot;unbounded&amp;quot;&amp;gt;&amp;#xD;&amp;#xA;          &amp;lt;xs:element name=&amp;quot;resultSet&amp;quot;&amp;gt;&amp;#xD;&amp;#xA;            &amp;lt;xs:complexType&amp;gt;&amp;#xD;&amp;#xA;              &amp;lt;xs:sequence&amp;gt;&amp;#xD;&amp;#xA;                &amp;lt;xs:element name=&amp;quot;Column1&amp;quot; type=&amp;quot;xs:string&amp;quot; minOccurs=&amp;quot;0&amp;quot; /&amp;gt;&amp;#xD;&amp;#xA;                &amp;lt;xs:element name=&amp;quot;Column2&amp;quot; type=&amp;quot;xs:string&amp;quot; minOccurs=&amp;quot;0&amp;quot; /&amp;gt;&amp;#xD;&amp;#xA;                &amp;lt;xs:element name=&amp;quot;Column3&amp;quot; type=&amp;quot;xs:string&amp;quot; minOccurs=&amp;quot;0&amp;quot; /&amp;gt;&amp;#xD;&amp;#xA;              &amp;lt;/xs:sequence&amp;gt;&amp;#xD;&amp;#xA;            &amp;lt;/xs:complexType&amp;gt;&amp;#xD;&amp;#xA;          &amp;lt;/xs:element&amp;gt;&amp;#xD;&amp;#xA;        &amp;lt;/xs:choice&amp;gt;&amp;#xD;&amp;#xA;      &amp;lt;/xs:complexType&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;/xs:element&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/xs:schema&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;resultSet&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column1 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column2 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column3 /&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/resultSet&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;resultSet&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column1 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column2 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column3 /&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/resultSet&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;resultSet&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column1 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column2 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column3 /&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/resultSet&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;resultSet&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column1 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column2 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column3 /&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/resultSet&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;resultSet&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column1 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column2 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column3 /&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/resultSet&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;resultSet&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column1 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column2 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column3 /&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/resultSet&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;resultSet&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column1 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column2 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column3 /&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/resultSet&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;resultSet&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column1 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column2 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column3 /&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/resultSet&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;resultSet&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column1 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column2 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column3 /&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/resultSet&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;resultSet&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column1 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column2 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column3 /&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/resultSet&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;resultSet&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column1 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column2 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column3 /&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/resultSet&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;resultSet&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column1 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column2 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column3 /&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/resultSet&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;resultSet&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column1 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column2 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column3 /&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/resultSet&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;resultSet&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column1 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column2 /&amp;gt;&amp;#xD;&amp;#xA;    &amp;lt;Column3 /&amp;gt;&amp;#xD;&amp;#xA;  &amp;lt;/resultSet&amp;gt;&amp;#xD;&amp;#xA;&amp;lt;/NewDataSet&amp;gt;&quot; /&gt;&#xD;&#xA;  &lt;WhileActivity x:Name=&quot;whileActivity1&quot; Condition=&quot;{x:Null}&quot;&gt;&#xD;&#xA;    &lt;SequenceActivity x:Name=&quot;sequenceActivity1&quot;&gt;&#xD;&#xA;      &lt;ns7:ExitWhile IsValid=&quot;True&quot; x:Name=&quot;exitWhile1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Counter=&quot;%getRowsCount1%&quot; Description=&quot;Exit     current while activity&quot; DisplayName=&quot;Exit While&quot; TypeName=&quot;ExitWhile&quot; /&gt;&#xD;&#xA;      &lt;ns8:GetCellValue ColumnType=&quot;Number&quot; IsValid=&quot;True&quot; x:Name=&quot;Description&quot; ColumnNumber=&quot;9&quot; ResultSet=&quot;%getWindowEventLogs1%&quot; RowNumber=&quot;%exitwhile1%&quot; ResultSetName=&quot;getWindowEventLogs1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Description=&quot;Gets a     specific cell value from a resultset.&quot; DisplayName=&quot;Get Cell     Value&quot; TypeName=&quot;GetCellValue&quot; /&gt;&#xD;&#xA;      &lt;ns9:ExtractLineFromText IsValid=&quot;True&quot; TextName=&quot;Description&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; x:Name=&quot;extractLineFromText1&quot; Text=&quot;%Description%&quot; DisplayName=&quot;Extract Line from Text&quot; IsLineNumber=&quot;False&quot; Description=&quot;Extract lines from text.&quot; TypeName=&quot;ExtractLineFromText&quot; LineNumber=&quot;&quot; LineContain=&quot;User     Name:&quot; condition=&quot;User     Name:&quot; /&gt;&#xD;&#xA;      &lt;ns8:GetCellValue ColumnType=&quot;Number&quot; IsValid=&quot;True&quot; x:Name=&quot;getCellValue2&quot; ColumnNumber=&quot;1&quot; ResultSet=&quot;%extractLineFromText1%&quot; RowNumber=&quot;1&quot; ResultSetName=&quot;extractLineFromText1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Description=&quot;Gets a     specific cell value from a resultset.&quot; DisplayName=&quot;Get Cell     Value&quot; TypeName=&quot;GetCellValue&quot; /&gt;&#xD;&#xA;      &lt;ns10:ReplaceString IsValid=&quot;True&quot; x:Name=&quot;UserName&quot; RemoveNewLines=&quot;True&quot; FindString=&quot;User Name:&quot; Timeout=&quot;00:01:00&quot; ReplaceWithString=&quot;&quot; SourceString=&quot;%getCellValue2%&quot; IsMatchCase=&quot;False&quot; RemoveSpaces=&quot;True&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Description=&quot;Find and replace a string with     another string&quot; RemoveTabs=&quot;True&quot; DisplayName=&quot;Replace String&quot; TypeName=&quot;ReplaceString&quot; /&gt;&#xD;&#xA;      &lt;ns11:GetRows RowNumber=&quot;&quot; x:Name=&quot;getRows1&quot; HostName=&quot;{x:Null}&quot; RowContains=&quot;%UserName%&quot; ResultSet=&quot;%UserReport%&quot; Timeout=&quot;00:01:00&quot; IsValid=&quot;True&quot; isRowNumber=&quot;1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; DisplayName=&quot;Get Rows&quot; ResultSetName=&quot;UserReport&quot; TimeInSeconds=&quot;0&quot; Description=&quot;Gets     specified rows from a resultset.&quot; HostId=&quot;0&quot; TypeName=&quot;GetRows&quot; /&gt;&#xD;&#xA;      &lt;ns1:GetRowsCount IsValid=&quot;True&quot; x:Name=&quot;getRowsCount2&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ResultSet=&quot;%getRows1%&quot; DisplayName=&quot;Get Rows Count&quot; ResultSetName=&quot;getRows1&quot; Description=&quot;Gets the amount of rows in a resultset.&quot; TypeName=&quot;GetRowsCount&quot; /&gt;&#xD;&#xA;      &lt;IfElseActivity x:Name=&quot;Check_If_User_Exists&quot;&gt;&#xD;&#xA;        &lt;IfElseBranchActivity x:Name=&quot;Update_Existing_User&quot;&gt;&#xD;&#xA;          &lt;ns4:ReturnValue Value=&quot;1&quot; IsValid=&quot;True&quot; x:Name=&quot;returnValue3&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ConditionName=&quot;&quot; UseBranchWhenTimeout=&quot;False&quot; UseStoredValue=&quot;False&quot; ConditionType=&quot;Equals&quot; DisplayName=&quot;Return Value&quot; Formula=&quot;=Equals(&amp;quot;&amp;amp;&amp;amp;&amp;amp;&amp;quot;,&amp;quot;1&amp;quot;)&quot; Description=&quot;Use a returned value of a previous activity.&quot; ConditionNumber=&quot;-1&quot; UseCustomeCondition=&quot;False&quot; Type=&quot;UserDefinedValue&quot; TypeName=&quot;ReturnValue&quot; /&gt;&#xD;&#xA;          &lt;ns8:GetCellValue ColumnType=&quot;Number&quot; IsValid=&quot;True&quot; x:Name=&quot;RowNum&quot; ColumnNumber=&quot;1&quot; ResultSet=&quot;%getRows1%&quot; RowNumber=&quot;1&quot; ResultSetName=&quot;getRows1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Description=&quot;Gets a specific cell     value from a resultset.&quot; DisplayName=&quot;Get Cell Value&quot; TypeName=&quot;GetCellValue&quot; /&gt;&#xD;&#xA;          &lt;ns8:GetCellValue ColumnType=&quot;Number&quot; IsValid=&quot;True&quot; x:Name=&quot;counter&quot; ColumnNumber=&quot;2&quot; ResultSet=&quot;%UserReport%&quot; RowNumber=&quot;%RowNum%&quot; ResultSetName=&quot;UserReport&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Description=&quot;Gets a specific cell     value from a resultset.&quot; DisplayName=&quot;Get Cell Value&quot; TypeName=&quot;GetCellValue&quot; /&gt;&#xD;&#xA;          &lt;ns12:FunctionCalculator IsValid=&quot;True&quot; x:Name=&quot;functionCalculator1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Formula=&quot;%counter% + 1&quot; Description=&quot;Calculate a function&quot; DisplayName=&quot;Function Calculator&quot; TypeName=&quot;FunctionCalculator&quot; /&gt;&#xD;&#xA;          &lt;ns13:SetCellValue ColumnType=&quot;Number&quot; IsValid=&quot;True&quot; ColNumber=&quot;2&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; NewValue=&quot;%functionCalculator1%&quot; RowNumber=&quot;%RowNum%&quot; VariableName=&quot;%UserReport%&quot; x:Name=&quot;setCellValue1&quot; Description=&quot;Set a new value to a result set.&quot; DisplayName=&quot;Set     Cell Value&quot; TypeName=&quot;SetCellValue&quot; /&gt;&#xD;&#xA;        &lt;/IfElseBranchActivity&gt;&#xD;&#xA;        &lt;IfElseBranchActivity x:Name=&quot;Add_New_User&quot;&gt;&#xD;&#xA;          &lt;ns4:ReturnValue Value=&quot;1&quot; IsValid=&quot;True&quot; x:Name=&quot;returnValue4&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ConditionName=&quot;&quot; UseBranchWhenTimeout=&quot;True&quot; UseStoredValue=&quot;False&quot; ConditionType=&quot;Not Equals&quot; DisplayName=&quot;Return Value&quot; Formula=&quot;=Not     Equals(&amp;quot;&amp;amp;&amp;amp;&amp;amp;&amp;quot;,&amp;quot;1&amp;quot;)&quot; Description=&quot;Use a returned value of a previous activity.&quot; ConditionNumber=&quot;-1&quot; UseCustomeCondition=&quot;False&quot; Type=&quot;UserDefinedValue&quot; TypeName=&quot;ReturnValue&quot; /&gt;&#xD;&#xA;          &lt;ns14:AddMemoryTableRow Selection=&quot;2&quot; IsValid=&quot;True&quot; x:Name=&quot;addMemoryTableRow1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ResultSet=&quot;%UserReport%&quot; RowNumber=&quot;&quot; NumberOfRows=&quot;1&quot; ResultSetName=&quot;UserReport&quot; Description=&quot;Add a memory table row.&quot; DisplayName=&quot;Add Row to     Memory Table&quot; TypeName=&quot;AddMemoryTableRow&quot; /&gt;&#xD;&#xA;          &lt;ns1:GetRowsCount IsValid=&quot;True&quot; x:Name=&quot;getRowsCount3&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ResultSet=&quot;%UserReport%&quot; DisplayName=&quot;Get Rows Count&quot; ResultSetName=&quot;UserReport&quot; Description=&quot;Gets the amount of rows in a resultset.&quot; TypeName=&quot;GetRowsCount&quot; /&gt;&#xD;&#xA;          &lt;ns13:SetCellValue ColumnType=&quot;Number&quot; IsValid=&quot;True&quot; ColNumber=&quot;1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; NewValue=&quot;%UserName%&quot; RowNumber=&quot;%getRowsCount3%&quot; VariableName=&quot;%UserReport%&quot; x:Name=&quot;setCellValue2&quot; Description=&quot;Set a new value to a result set.&quot; DisplayName=&quot;Set     Cell Value&quot; TypeName=&quot;SetCellValue&quot; /&gt;&#xD;&#xA;          &lt;ns13:SetCellValue ColumnType=&quot;Number&quot; IsValid=&quot;True&quot; ColNumber=&quot;2&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; NewValue=&quot;1&quot; RowNumber=&quot;%getRowsCount3%&quot; VariableName=&quot;%UserReport%&quot; x:Name=&quot;setCellValue3&quot; Description=&quot;Set a new value to a result     set.&quot; DisplayName=&quot;Set Cell Value&quot; TypeName=&quot;SetCellValue&quot; /&gt;&#xD;&#xA;        &lt;/IfElseBranchActivity&gt;&#xD;&#xA;      &lt;/IfElseActivity&gt;&#xD;&#xA;    &lt;/SequenceActivity&gt;&#xD;&#xA;  &lt;/WhileActivity&gt;&#xD;&#xA;  &lt;ns3:DeleteMemoryTableRows IsValid=&quot;True&quot; x:Name=&quot;deleteMemoryTableRows1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ResultSet=&quot;%UserReport%&quot; RowNumber=&quot;1&quot; ResultSetName=&quot;%UserReport%&quot; Description=&quot;Deletes a memory table     rows.&quot; DisplayName=&quot;Delete Rows From Memory Table&quot; TypeName=&quot;DeleteMemoryTableRows&quot; /&gt;&#xD;&#xA;  &lt;ns1:GetRowsCount IsValid=&quot;True&quot; x:Name=&quot;getRowsCount4&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ResultSet=&quot;%UserReport%&quot; DisplayName=&quot;Get Rows Count&quot; ResultSetName=&quot;UserReport&quot; Description=&quot;Gets the amount of rows     in a resultset.&quot; TypeName=&quot;GetRowsCount&quot; /&gt;&#xD;&#xA;  &lt;WhileActivity x:Name=&quot;whileActivity2&quot; Condition=&quot;{x:Null}&quot;&gt;&#xD;&#xA;    &lt;SequenceActivity x:Name=&quot;sequenceActivity2&quot;&gt;&#xD;&#xA;      &lt;ns7:ExitWhile IsValid=&quot;True&quot; x:Name=&quot;exitWhile2&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Counter=&quot;%getRowsCount4%&quot; Description=&quot;Exit     current while activity&quot; DisplayName=&quot;Exit While&quot; TypeName=&quot;ExitWhile&quot; /&gt;&#xD;&#xA;      &lt;ns8:GetCellValue ColumnType=&quot;Number&quot; IsValid=&quot;True&quot; x:Name=&quot;UserName2&quot; ColumnNumber=&quot;1&quot; ResultSet=&quot;%UserReport%&quot; RowNumber=&quot;%exitWhile2%&quot; ResultSetName=&quot;UserReport&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Description=&quot;Gets a specific cell     value from a resultset.&quot; DisplayName=&quot;Get Cell Value&quot; TypeName=&quot;GetCellValue&quot; /&gt;&#xD;&#xA;      &lt;ns8:GetCellValue ColumnType=&quot;Number&quot; IsValid=&quot;True&quot; x:Name=&quot;Attempts&quot; ColumnNumber=&quot;2&quot; ResultSet=&quot;%UserReport%&quot; RowNumber=&quot;%exitWhile2%&quot; ResultSetName=&quot;UserReport&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Description=&quot;Gets a specific cell     value from a resultset.&quot; DisplayName=&quot;Get Cell Value&quot; TypeName=&quot;GetCellValue&quot; /&gt;&#xD;&#xA;      &lt;IfElseActivity x:Name=&quot;ifElseActivity2&quot;&gt;&#xD;&#xA;        &lt;IfElseBranchActivity x:Name=&quot;ifElseBranchActivity3&quot;&gt;&#xD;&#xA;          &lt;ns4:ReturnValue Value=&quot;3&quot; IsValid=&quot;True&quot; x:Name=&quot;returnValue5&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ConditionName=&quot;&quot; UseBranchWhenTimeout=&quot;True&quot; UseStoredValue=&quot;False&quot; ConditionType=&quot;&amp;lt;&quot; DisplayName=&quot;Return Value&quot; Formula=&quot;=&amp;amp;&amp;amp;&amp;amp; &amp;lt; 3&quot; Description=&quot;Use a returned value of a previous activity.&quot; ConditionNumber=&quot;-1&quot; UseCustomeCondition=&quot;False&quot; Type=&quot;UserDefinedValue&quot; TypeName=&quot;ReturnValue&quot; /&gt;&#xD;&#xA;          &lt;ns6:Continue DisplayName=&quot;Continue&quot; x:Name=&quot;continue2&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; IsValid=&quot;True&quot; TypeName=&quot;Continue&quot; Description=&quot;Continue the current workfow or branch&quot; /&gt;&#xD;&#xA;        &lt;/IfElseBranchActivity&gt;&#xD;&#xA;        &lt;IfElseBranchActivity x:Name=&quot;ifElseBranchActivity4&quot;&gt;&#xD;&#xA;          &lt;ns4:ReturnValue Value=&quot;3&quot; IsValid=&quot;True&quot; x:Name=&quot;returnValue6&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ConditionName=&quot;&quot; UseBranchWhenTimeout=&quot;False&quot; UseStoredValue=&quot;False&quot; ConditionType=&quot;=&amp;gt;&quot; DisplayName=&quot;Return Value&quot; Formula=&quot;=&amp;amp;&amp;amp;&amp;amp; =&amp;gt; 3&quot; Description=&quot;Use a returned value of a previous activity.&quot; ConditionNumber=&quot;-1&quot; UseCustomeCondition=&quot;False&quot; Type=&quot;UserDefinedValue&quot; TypeName=&quot;ReturnValue&quot; /&gt;&#xD;&#xA;          &lt;ns15:SendEmail Channel=&quot;0&quot; TimeInSeconds=&quot;0&quot; Subject=&quot;Login Failures Report&quot; DestinationNumber=&quot;1&quot; x:Name=&quot;sendEmail2&quot; TemplateNumber=&quot;0&quot; ShiftLevel=&quot;&quot; IsValid=&quot;True&quot; HostId=&quot;-2&quot; TemplateName=&quot;{x:Null}&quot; TypeName=&quot;SendEmail&quot; SendRN=&quot;False&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; DestinationTypeCc=&quot;User&quot; DestinationType=&quot;User&quot; HostName=&quot;{x:Null}&quot; Timeout=&quot;00:00:00&quot; DisplayName=&quot;Send Email&quot; Attachments=&quot;&quot; Cc=&quot;&quot; Description=&quot;Send an email to a user, a     group or a duty.&quot; Continue=&quot;False&quot; DestinationNumberCc=&quot;0&quot; Body=&quot;user %userName2% has %Attempts% failed login attempts in     the last hour&quot; To=&quot;Admin&quot; ShiftLevelCc=&quot;&quot; MessageType=&quot;Custom&quot; /&gt;&#xD;&#xA;        &lt;/IfElseBranchActivity&gt;&#xD;&#xA;      &lt;/IfElseActivity&gt;&#xD;&#xA;    &lt;/SequenceActivity&gt;&#xD;&#xA;  &lt;/WhileActivity&gt;&#xD;&#xA;&lt;/SequentialWorkflowActivity&gt;" XomlStatus="0" Details="" WorkflowType="2" WorkflowFolderId="11" CurrentRevisionNumber="1" WorkflowParentId="0" DateCreated="2021-03-22T16:44:59" DateCreatedUser="1" DateModified="2021-03-22T16:44:59" DateModifiedUser="1" />
  </Workflows>
  <Objects>
    <Hosts>
      <Host Hnumber="1" Hname="LocalHost" Hdescription="" Deleted="0" DeviceType="0" Site="0" IPAddress="127.0.0.1" Platform="1" InstanceMode="0" CredentialsInherit="0" ExecutorID="0" AutoCreated="0" IsHidden="0" />
    </Hosts>
    <ErrorHandlers />
    <ErrorMessages />
    <MessageTemplates />
    <Sites />
    <Developments />
    <Users>
      <User Unumber="1" Uname="user@mail.com" FName="Prename" LName="Surname" Email="user@mail.com" Pnumber1="0000000" Pnumber2="0000000" Descp="Administrator" Role="1" Password1="FOE+TFqIMJzP85UQs8jWDjPdv5Xj4UTdEGTG7NcoxZFpVvQaBQMeD8ELELRwAGx7WMSOtX+dug8f9Ss1lwh0yhHnhg==" Deleted="0" Skypeuser="SKYPEUser" Msnuser=" MSNUser" Icquser="ICQUser" Aoluser="AOLUser" Modulenumber="0" Getalerts="0" CurrentTAG="0" TagReset="0" SMSLength="160" Site="0" DashboardMode="0" UserColor="229,105,111" SitesInCycleRotation="0" SecondsPauseCycle="120" TableRowsMultiSitePage="6" TableRowsDefaultPage="0" ActiveDirectoryID="" HomePhoneNumber="" WorkPhoneNumber="" MobilePhoneNumber="" Office="" ListenerClientIP="" EmployeeNumber="" ActiveDirectoryUpdate="" ResetPasswordToken="" LoginAttempts="0" />
    </Users>
    <Groups />
    <UsersGroupsArray />
    <Domains />
    <Commands />
    <Classifications />
    <Incidents />
    <TimeFrames />
    <Variables />
    <Modules />
    <Conditions />
    <ConditionArrays />
    <ConditionObjects />
    <SoapWebServices />
    <Triggers />
    <TriggerConditionArrays />
    <LogCategory />
    <LogTriggerCategory />
    <Schedules />
    <CustomActivities />
    <ActivitiesSource />
    <ScheduleCategoriesRelations />
  </Objects>
  <ObjectsRelations>
    <ObjectRelation ObjectID="1" Type="Host" ParentWorkFlowID="102" />
    <ObjectRelation ObjectID="1" Type="User" ParentWorkFlowID="102" />
  </ObjectsRelations>
  <ExportKeys />
</TotalExport>